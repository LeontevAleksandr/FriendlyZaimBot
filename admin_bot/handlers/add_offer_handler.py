"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
"""
import logging
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from admin_bot.config.auth import is_admin
from admin_bot.states.add_offer_states import AddOfferStates
from admin_bot.keyboards.main_keyboards import main_keyboard
from admin_bot.keyboards.payment_keyboards import get_payment_methods_keyboard
from admin_bot.utils.validators import parse_metrics
from admin_bot.utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)


async def add_offer_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        return

    await state.set_state(AddOfferStates.name)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
    ])

    await safe_edit_message(
        callback.message,
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞</b>\n\n"
        "–®–∞–≥ 1/9: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ú–§–û:",
        reply_markup=cancel_keyboard
    )


async def cancel_add_offer(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        return

    await state.clear()
    await safe_edit_message(
        callback.message,
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_keyboard()
    )


async def add_offer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ú–§–û"""
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(name=name)
    await state.set_state(AddOfferStates.countries)

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\nüåç –®–∞–≥ 2/9: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
            [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")],
            [InlineKeyboardButton(text="üåç –û–±–µ", callback_data="country_both")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
        ])
    )


async def add_offer_countries(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω"""
    choice = callback.data.replace("country_", "")
    countries_map = {
        "russia": ["russia"],
        "kazakhstan": ["kazakhstan"],
        "both": ["russia", "kazakhstan"]
    }
    countries = countries_map[choice]

    await state.update_data(countries=countries)
    await state.set_state(AddOfferStates.amounts)

    countries_text = {"russia": "üá∑üá∫ –†–æ—Å—Å–∏—è", "kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "both": "üåç –†–æ—Å—Å–∏—è –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"}[choice]

    await safe_edit_message(
        callback.message,
        f"‚úÖ –°—Ç—Ä–∞–Ω—ã: {countries_text}\n\n"
        f"üí∞ –®–∞–≥ 3/9: –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ —Å—É–º–º–µ –∑–∞–π–º–∞\n\n"
        f"–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å\n–ü—Ä–∏–º–µ—Ä: 1000 30000\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
    )


async def add_offer_amounts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Å—É–º–º–µ"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 2 —á–∏—Å–ª–∞")

        min_amount, max_amount = int(parts[0]), int(parts[1])
        if min_amount <= 0 or max_amount <= 0:
            raise ValueError("–°—É–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        if min_amount >= max_amount:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π")

        await state.update_data(min_amount=min_amount, max_amount=max_amount)
        await state.set_state(AddOfferStates.age)

        await message.answer(
            f"‚úÖ –°—É–º–º—ã: {min_amount:,} - {max_amount:,} ‚ÇΩ\n\n"
            f"üë§ –®–∞–≥ 4/9: –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
            f"–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å\n–ü—Ä–∏–º–µ—Ä: 18 70\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
        )

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


async def add_offer_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 2 —á–∏—Å–ª–∞")

        min_age, max_age = int(parts[0]), int(parts[1])
        if min_age < 18 or max_age > 100:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
        if min_age >= max_age:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")

        await state.update_data(min_age=min_age, max_age=max_age)
        await state.set_state(AddOfferStates.loan_terms)

        await message.answer(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {min_age} - {max_age} –ª–µ—Ç\n\n"
            f"üìÖ –®–∞–≥ 5/9: –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞ –≤ –¥–Ω—è—Ö\n\n"
            f"–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å\n–ü—Ä–∏–º–µ—Ä: 5 30\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
        )

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


async def add_offer_loan_terms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 2 —á–∏—Å–ª–∞")

        min_days, max_days = int(parts[0]), int(parts[1])
        if min_days <= 0 or max_days <= 0:
            raise ValueError("–î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if min_days > max_days:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")

        await state.update_data(min_days=min_days, max_days=max_days)
        await state.set_state(AddOfferStates.zero_percent)

        await message.answer(
            f"‚úÖ –°—Ä–æ–∫–∏: {min_days} - {max_days} –¥–Ω–µ–π\n\n"
            f"üéØ –®–∞–≥ 6/9: –ï—Å—Ç—å –ª–∏ 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="zero_yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="zero_no")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
            ])
        )

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


async def add_offer_zero(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 0% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    zero_percent = callback.data == "zero_yes"
    await state.update_data(zero_percent=zero_percent)
    await state.set_state(AddOfferStates.description)

    zero_text = "‚úÖ –ï—Å—Ç—å 0%" if zero_percent else "‚ùå –ù–µ—Ç 0%"

    await safe_edit_message(
        callback.message,
        f"{zero_text}\n\n"
        f"üìù –®–∞–≥ 7/9: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞\n\n"
        f"–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–π–º–∞\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
    )


async def add_offer_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(description=description)
    await state.set_state(AddOfferStates.russia_link)

    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        f"üîó –®–∞–≥ 8/9: –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –†–æ—Å—Å–∏–∏\n\n"
        f"–ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –≤–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º ID\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
    )


async def add_offer_russia_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –†–æ—Å—Å–∏–∏"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    russia_link = message.text.strip()
    if not russia_link:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(russia_link=russia_link)
    data = await state.get_data()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–µ–≥–æ
    if "kazakhstan" in data.get("countries", []):
        await state.set_state(AddOfferStates.kazakhstan_link)
        await message.answer(
            f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –†–æ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
            f"üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—Å—ã–ª–∫–∞\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è"
        )
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Ç—Ä–∏–∫–∞–º
        await state.set_state(AddOfferStates.metrics)
        await message.answer(
            "‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
            "üìà –®–∞–≥ 9/9: –í–≤–µ–¥–∏—Ç–µ CPA –º–µ—Ç—Ä–∏–∫–∏\n\n"
            "<b>–°–ø–æ—Å–æ–± 1 - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n"
            "<code>54.9 4.2 102.01 185.98</code>\n(CR AR EPC EPL)\n\n"
            "<b>–°–ø–æ—Å–æ–± 2 - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–∞:</b>\n"
            "<code>CR: 54.9%\nAR: 4.2%\nEPC: 102.01\nEPL: 185.98</code>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è",
            parse_mode="HTML"
        )


async def add_offer_kazakhstan_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    kz_link = message.text.strip() if message.text.strip() != "-" else None
    await state.update_data(kazakhstan_link=kz_link)
    await state.set_state(AddOfferStates.metrics)

    await message.answer(
        "‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        "üìà –®–∞–≥ 9/9: –í–≤–µ–¥–∏—Ç–µ CPA –º–µ—Ç—Ä–∏–∫–∏\n\n"
        "<b>–°–ø–æ—Å–æ–± 1 - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n"
        "<code>54.9 4.2 102.01 185.98</code>\n(CR AR EPC EPL)\n\n"
        "<b>–°–ø–æ—Å–æ–± 2 - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–∞:</b>\n"
        "<code>CR: 54.9%\nAR: 4.2%\nEPC: 102.01\nEPL: 185.98</code>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è",
        parse_mode="HTML"
    )


async def add_offer_metrics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CPA –º–µ—Ç—Ä–∏–∫"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        success, metrics = parse_metrics(message.text)
        if not success:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 54.9 4.2 102.01 185.98\n"
                "‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å —Å–∞–π—Ç–∞: CR: 54.9% AR: 4.2% ..."
            )

        await state.update_data(metrics=metrics)
        await state.set_state(AddOfferStates.priority)

        await message.answer(
            f"‚úÖ <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã:</b>\n"
            f"üìà CR: {metrics['cr']}%\n"
            f"üìà AR: {metrics['ar']}%\n"
            f"üí∞ EPC: {metrics['epc']} ‚ÇΩ\n"
            f"üí∞ EPL: {metrics['epl']} ‚ÇΩ\n\n"
            f"‚≠ê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10):\n"
            f"1 = –Ω–∏–∑–∫–∏–π, 10 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è",
            parse_mode="HTML"
        )

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


async def add_offer_priority(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        priority = int(message.text.strip())
        if not 1 <= priority <= 10:
            raise ValueError("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")

        await state.update_data(priority=priority)
        await state.set_state(AddOfferStates.payment_methods)

        await message.answer(
            f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/10\n\n"
            f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤\n\n"
            f"üîß –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:",
            reply_markup=get_payment_methods_keyboard([], show_back=False),
            parse_mode="HTML"
        )

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


def register_add_offer_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    dp.callback_query.register(add_offer_start, F.data == "add_offer")
    dp.callback_query.register(cancel_add_offer, F.data == "cancel_add_offer")
    dp.callback_query.register(add_offer_countries, F.data.startswith("country_"))
    dp.callback_query.register(add_offer_zero, F.data.startswith("zero_"))

    dp.message.register(add_offer_name, AddOfferStates.name)
    dp.message.register(add_offer_amounts, AddOfferStates.amounts)
    dp.message.register(add_offer_age, AddOfferStates.age)
    dp.message.register(add_offer_loan_terms, AddOfferStates.loan_terms)
    dp.message.register(add_offer_description, AddOfferStates.description)
    dp.message.register(add_offer_russia_link, AddOfferStates.russia_link)
    dp.message.register(add_offer_kazakhstan_link, AddOfferStates.kazakhstan_link)
    dp.message.register(add_offer_metrics, AddOfferStates.metrics)
    dp.message.register(add_offer_priority, AddOfferStates.priority)