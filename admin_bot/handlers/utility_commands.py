"""
–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from datetime import datetime
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command

from admin_bot.config.auth import is_admin
from admin_bot.config.constants import PAYMENT_METHODS
from admin_bot.keyboards.main_keyboards import main_keyboard
from admin_bot.utils.offer_manager import load_offers, save_offers
from admin_bot.utils.formatters import escape_html

logger = logging.getLogger(__name__)


async def check_all_offers(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /check_offers - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    offers = load_offers()
    microloans = offers.get("microloans", {})

    if not microloans:
        await message.answer("üìã <b>–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ –±–∞–∑–µ</b>", parse_mode="HTML")
        return

    result = f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ ({len(microloans)}):</b>\n\n"

    sorted_offers = sorted(
        microloans.items(),
        key=lambda x: x[1].get('priority', {}).get('manual_boost', 0),
        reverse=True
    )
    active_count = inactive_count = 0

    for offer_id, offer in sorted_offers:
        status = offer.get('status', {}).get('is_active', True)
        priority = offer.get('priority', {}).get('manual_boost', 0)
        cr = offer.get('metrics', {}).get('cr', 0)
        safe_name = escape_html(offer.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

        if status:
            active_count += 1
            status_emoji = "‚úÖ"
        else:
            inactive_count += 1
            status_emoji = "‚ùå"

        result += f"{status_emoji} <b>{safe_name}</b>\n   P: {priority}/10, CR: {cr}%\n   ID: {offer_id}\n\n"

    result += f"üìà <b>–ò—Ç–æ–≥–æ:</b>\n   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n   ‚Ä¢ –í—Å–µ–≥–æ: {len(microloans)}"

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    if len(result) > 4096:
        chunks = [result[i:i + 4000] for i in range(0, len(result), 4000)]
        for i, chunk in enumerate(chunks):
            await message.answer(
                chunk if i == 0 else f"<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i + 1}:</b>\n{chunk}",
                parse_mode="HTML"
            )
    else:
        await message.answer(result, parse_mode="HTML")


async def fix_inactive_offers(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /fix_inactive_offers - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    offers = load_offers()
    fixed_count = 0

    for offer_id, offer in offers.get("microloans", {}).items():
        if not offer.get('status', {}).get('is_active', True):
            offer['status']['is_active'] = True
            offer['status']['updated_at'] = datetime.now().isoformat()
            fixed_count += 1

    if fixed_count > 0:
        save_offers(offers)
        await message.answer(
            f"‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üìä –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {fixed_count}\n"
            f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã",
            parse_mode="HTML"
        )


async def migrate_offers_structure(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /migrate_offers - –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ä—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    offers = load_offers()
    migrated_count = 0

    for offer_id, offer in offers.get("microloans", {}).items():
        updated = False

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        if "payment_methods" not in offer:
            offer["payment_methods"] = list(PAYMENT_METHODS.keys())
            updated = True

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞
        if "loan_terms" not in offer:
            offer["loan_terms"] = {"min_days": 5, "max_days": 30}
            updated = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        if "status" not in offer:
            offer["status"] = {
                "is_active": True,
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
            updated = True

        if updated:
            offer["status"]["updated_at"] = datetime.now().isoformat()
            migrated_count += 1

    if migrated_count > 0:
        save_offers(offers)
        await message.answer(
            f"‚úÖ <b>–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {migrated_count}\n"
            f"üí≥ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è <b>–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            parse_mode="HTML"
        )


async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=main_keyboard()
    )


def register_utility_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    dp.message.register(check_all_offers, Command("check_offers"))
    dp.message.register(fix_inactive_offers, Command("fix_inactive_offers"))
    dp.message.register(migrate_offers_structure, Command("migrate_offers"))
    dp.message.register(unknown_message)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º