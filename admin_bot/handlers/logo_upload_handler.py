"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏
"""
import os
import logging
from datetime import datetime
from typing import Dict
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from admin_bot.config.auth import is_admin
from admin_bot.config.constants import IMAGES_DIR
from admin_bot.states.edit_states import EditStates
from admin_bot.states.add_offer_states import AddOfferStates
from admin_bot.keyboards.offer_keyboards import edit_keyboard
from admin_bot.keyboards.main_keyboards import main_keyboard
from admin_bot.utils.offer_manager import load_offers, save_offers, generate_offer_id, update_offer_timestamp
from admin_bot.utils.formatters import escape_html, format_payment_methods
from admin_bot.utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)


async def handle_photo_upload(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    current_state = await state.get_state()
    data = await state.get_data()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
    if current_state == EditStates.waiting_value.state and data.get('field') == 'logo':
        await handle_edit_logo_upload(message, state, bot)
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
    elif current_state == AddOfferStates.logo.state:
        await handle_add_offer_logo(message, state, bot)
    else:
        await message.answer(
            "üñºÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:\n"
            "üìã –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä ‚Üí –Ω–∞–∂–º–∏—Ç–µ 'üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø'",
            parse_mode="HTML"
        )


async def handle_edit_logo_upload(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞"""
    data = await state.get_data()
    offer_id = data.get('offer_id')

    if not offer_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ—Ñ—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)
        if not offer:
            await message.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        if offer.get('logo'):
            old_logo_path = os.path.join(IMAGES_DIR, offer['logo'])
            if os.path.exists(old_logo_path):
                os.remove(old_logo_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
        logo_filename = await save_logo_file(message, bot, offer_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä
        offer['logo'] = logo_filename
        offer = update_offer_timestamp(offer)
        offers["microloans"][offer_id] = offer
        save_offers(offers)

        await message.answer(
            f"‚úÖ <b>–õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\nüìÅ <b>–§–∞–π–ª:</b> {escape_html(logo_filename)}",
            parse_mode="HTML"
        )
        await message.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=edit_keyboard(offer_id))
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞</b>", parse_mode="HTML")
        await state.clear()


async def handle_add_offer_logo(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞"""
    try:
        data = await state.get_data()
        offer_id = generate_offer_id()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        logo_filename = await save_logo_file(message, bot, offer_id)

        # –°–æ–∑–¥–∞–µ–º –æ—Ñ—Ñ–µ—Ä —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ª–æ–≥–æ—Ç–∏–ø–æ–º
        await create_offer_with_data(data, offer_id, logo_filename, message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞</b>", parse_mode="HTML")
        await state.clear()


async def save_logo_file(message: Message, bot, offer_id: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    file_info = await bot.get_file(photo.file_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_extension = 'jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if file_info.file_path and '.' in file_info.file_path:
        file_extension = file_info.file_path.split('.')[-1]

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    logo_filename = f"{offer_id}_{timestamp}.{file_extension}"
    logo_path = os.path.join(IMAGES_DIR, logo_filename)

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_info.file_path, logo_path)

    return logo_filename


async def create_offer_with_data(data: Dict, offer_id: str, logo_filename: str, message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    now = datetime.now().isoformat()

    offer = {
        "id": offer_id,
        "name": data["name"],
        "logo": logo_filename,
        "geography": {
            "countries": data["countries"],
            "russia_link": data["russia_link"],
            "kazakhstan_link": data.get("kazakhstan_link")
        },
        "limits": {
            "min_amount": data["min_amount"],
            "max_amount": data["max_amount"],
            "min_age": data["min_age"],
            "max_age": data["max_age"]
        },
        "loan_terms": {
            "min_days": data.get("min_days", 5),
            "max_days": data.get("max_days", 30)
        },
        "zero_percent": data["zero_percent"],
        "description": data["description"],
        "payment_methods": data.get("payment_methods", []),
        "metrics": data["metrics"],
        "priority": {
            "manual_boost": data["priority"],
            "final_score": data["priority"] * 10
        },
        "status": {
            "is_active": True,
            "created_at": now,
            "updated_at": now
        }
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ—Ñ–µ—Ä
    offers = load_offers()
    offers["microloans"][offer_id] = offer
    save_offers(offers)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    metrics = data["metrics"]
    logo_status = f"‚úÖ {escape_html(logo_filename)}" if logo_filename else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    payment_methods_text = format_payment_methods(data.get("payment_methods", []))
    safe_name = escape_html(data['name'])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    countries = data.get("countries", [])
    if 'kazakhstan' in countries and 'russia' not in countries:
        epc_currency = "‚Ç∏"
    elif 'russia' in countries and 'kazakhstan' in countries:
        epc_currency = "‚ÇΩ/‚Ç∏"
    else:
        epc_currency = "‚ÇΩ"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞
    await message.answer(
        f"‚úÖ <b>–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üè∑Ô∏è <b>ID:</b> {offer_id}\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {safe_name}\n"
        f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {data['priority']}\n"
        f"üìà <b>CR:</b> {metrics['cr']}%\n"
        f"üí∞ <b>EPC:</b> {metrics['epc']} {epc_currency}\n"
        f"üñºÔ∏è <b>–õ–æ–≥–æ—Ç–∏–ø:</b> {logo_status}\n"
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n{payment_methods_text}",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()


def register_logo_upload_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot
    pass