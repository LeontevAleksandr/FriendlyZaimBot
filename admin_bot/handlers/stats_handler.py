"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from admin_bot.config.auth import is_admin
from admin_bot.config.constants import PAYMENT_METHODS
from admin_bot.utils.offer_manager import load_offers
from admin_bot.utils.formatters import escape_html
from admin_bot.utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)


async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        return

    try:
        offers = load_offers()
        microloans = offers.get("microloans", {})

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_offers = len(microloans)
        active_offers = sum(1 for offer in microloans.values()
                            if offer.get('status', {}).get('is_active', True))
        inactive_offers = total_offers - active_offers

        # –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        if total_offers > 0:
            avg_cr = sum(offer.get('metrics', {}).get('cr', 0) for offer in microloans.values()) / total_offers
            avg_ar = sum(offer.get('metrics', {}).get('ar', 0) for offer in microloans.values()) / total_offers
            avg_epc = sum(offer.get('metrics', {}).get('epc', 0) for offer in microloans.values()) / total_offers
            avg_epl = sum(offer.get('metrics', {}).get('epl', 0) for offer in microloans.values()) / total_offers
        else:
            avg_cr = avg_ar = avg_epc = avg_epl = 0

        # –¢–û–ü –æ—Ñ—Ñ–µ—Ä—ã –ø–æ CR
        top_offers = sorted(
            [(offer_id, offer) for offer_id, offer in microloans.items()],
            key=lambda x: x[1].get('metrics', {}).get('cr', 0),
            reverse=True
        )[:3]

        if top_offers:
            top_text = "\n".join(
                f"{i}. {escape_html(offer['name'])}: {offer.get('metrics', {}).get('cr', 0)}%"
                for i, (_, offer) in enumerate(top_offers, 1)
            )
        else:
            top_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è
        payment_stats = {}
        for offer in microloans.values():
            for method in offer.get('payment_methods', []):
                if method in PAYMENT_METHODS:
                    payment_stats[method] = payment_stats.get(method, 0) + 1

        if payment_stats:
            payment_stats_text = "\n".join(
                f"{PAYMENT_METHODS[method_id]['emoji']} "
                f"{PAYMENT_METHODS[method_id]['name'].replace(PAYMENT_METHODS[method_id]['emoji'] + ' ', '')}: {count}"
                for method_id, count in sorted(payment_stats.items(), key=lambda x: x[1], reverse=True)
            )
        else:
            payment_stats_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω
        country_stats = {"russia": 0, "kazakhstan": 0, "both": 0}
        for offer in microloans.values():
            countries = offer.get('geography', {}).get('countries', [])
            if 'russia' in countries and 'kazakhstan' in countries:
                country_stats["both"] += 1
            elif 'russia' in countries:
                country_stats["russia"] += 1
            elif 'kazakhstan' in countries:
                country_stats["kazakhstan"] += 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 0% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        zero_percent_count = sum(1 for offer in microloans.values()
                                 if offer.get('zero_percent', False))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
        with_logo_count = sum(1 for offer in microloans.values()
                              if offer.get('logo'))

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"üìã <b>–û—Ñ—Ñ–µ—Ä—ã:</b>\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_offers}\n"
            f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_offers}\n"
            f"   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_offers}\n\n"
            f"üåç <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è:</b>\n"
            f"   ‚Ä¢ üá∑üá∫ –¢–æ–ª—å–∫–æ –†–æ—Å—Å–∏—è: {country_stats['russia']}\n"
            f"   ‚Ä¢ üá∞üáø –¢–æ–ª—å–∫–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: {country_stats['kazakhstan']}\n"
            f"   ‚Ä¢ üåç –û–±–µ —Å—Ç—Ä–∞–Ω—ã: {country_stats['both']}\n\n"
            f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n"
            f"   ‚Ä¢ CR: {avg_cr:.1f}%\n"
            f"   ‚Ä¢ AR: {avg_ar:.1f}%\n"
            f"   ‚Ä¢ EPC: {avg_epc:.1f} ‚ÇΩ\n"
            f"   ‚Ä¢ EPL: {avg_epl:.1f} ‚ÇΩ\n\n"
            f"üèÜ <b>–¢–û–ü –ø–æ CR:</b>\n{top_text}\n\n"
            f"üéØ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            f"   ‚Ä¢ 0% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {zero_percent_count}\n"
            f"   ‚Ä¢ –° –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏: {with_logo_count}\n\n"
            f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n{payment_stats_text}"
        )

        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        await safe_edit_message(callback.message, text, reply_markup=back_keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def register_stats_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    dp.callback_query.register(show_stats, F.data == "stats")