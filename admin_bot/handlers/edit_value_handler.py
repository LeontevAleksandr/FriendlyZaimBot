"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –æ—Ñ—Ñ–µ—Ä–æ–≤
"""
import os
import logging
from datetime import datetime
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from admin_bot.config.constants import IMAGES_DIR
from admin_bot.states.edit_states import EditStates
from admin_bot.keyboards.offer_keyboards import edit_keyboard
from admin_bot.utils.offer_manager import load_offers, save_offers, update_offer_timestamp
from admin_bot.utils.validators import parse_metrics, validate_age_range, validate_amount_range, validate_loan_terms, \
    validate_priority
from admin_bot.utils.formatters import escape_html

logger = logging.getLogger(__name__)


async def process_edit_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    offer_id = data.get("offer_id")
    field = data.get("field")
    new_value = message.text.strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if new_value.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=edit_keyboard(offer_id))
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞
    offers = load_offers()
    offer = offers.get("microloans", {}).get(offer_id)
    if not offer:
        await message.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        success = await process_field_update(offer, field, new_value, message)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            offer = update_offer_timestamp(offer)
            offers["microloans"][offer_id] = offer
            save_offers(offers)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            await message.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=edit_keyboard(offer_id))

    except ValueError as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {field}: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>", parse_mode="HTML")

    await state.clear()


async def process_field_update(offer: dict, field: str, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –æ—Ñ—Ñ–µ—Ä–∞"""

    if field == "logo":
        return await process_logo_field(offer, new_value, message)
    elif field == "name":
        offer["name"] = new_value
        await message.answer("‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    elif field == "desc":
        offer["description"] = new_value
        await message.answer("‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    elif field == "ru_link":
        offer["geography"]["russia_link"] = new_value
        await message.answer("‚úÖ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –†–æ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML")
    elif field == "kz_link":
        offer["geography"]["kazakhstan_link"] = new_value if new_value != "-" else None
        await message.answer("‚úÖ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML")
    elif field == "priority":
        return await process_priority_field(offer, new_value, message)
    elif field == "amounts":
        return await process_amounts_field(offer, new_value, message)
    elif field == "age":
        return await process_age_field(offer, new_value, message)
    elif field == "loan_terms":
        return await process_loan_terms_field(offer, new_value, message)
    elif field == "metrics":
        return await process_metrics_field(offer, new_value, message)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")

    return True


async def process_logo_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞"""
    if new_value == "-":
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
        if offer.get('logo'):
            logo_path = os.path.join(IMAGES_DIR, offer['logo'])
            if os.path.exists(logo_path):
                os.remove(logo_path)
        offer['logo'] = None
        await message.answer("üóëÔ∏è <b>–õ–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª–µ–Ω</b>", parse_mode="HTML")
        return True
    else:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer(
            "üñºÔ∏è <b>–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–æ–≥–æ—Ç–∏–ø\n"
            "‚Ä¢ –ò–ª–∏ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            parse_mode="HTML"
        )
        return False


async def process_priority_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    is_valid, priority = validate_priority(new_value)
    if not is_valid:
        raise ValueError("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")

    offer["priority"]["manual_boost"] = priority
    offer["priority"]["final_score"] = priority * 10
    await message.answer(f"‚úÖ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:</b> {priority}/10", parse_mode="HTML")
    return True


async def process_amounts_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ —Å—É–º–º–µ"""
    is_valid, amounts = validate_amount_range(new_value)
    if not is_valid:
        raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 50000)")

    offer["limits"]["min_amount"] = amounts["min_amount"]
    offer["limits"]["max_amount"] = amounts["max_amount"]

    await message.answer(
        f"‚úÖ <b>–õ–∏–º–∏—Ç—ã —Å—É–º–º –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üí∞ –ú–∏–Ω–∏–º—É–º: {amounts['min_amount']:,} ‚ÇΩ\n"
        f"üí∞ –ú–∞–∫—Å–∏–º—É–º: {amounts['max_amount']:,} ‚ÇΩ",
        parse_mode="HTML"
    )
    return True


async def process_age_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    is_valid, ages = validate_age_range(new_value)
    if not is_valid:
        raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18 70)")

    offer["limits"]["min_age"] = ages["min_age"]
    offer["limits"]["max_age"] = ages["max_age"]

    await message.answer(
        f"‚úÖ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üë§ –ú–∏–Ω–∏–º—É–º: {ages['min_age']} –ª–µ—Ç\n"
        f"üë§ –ú–∞–∫—Å–∏–º—É–º: {ages['max_age']} –ª–µ—Ç",
        parse_mode="HTML"
    )
    return True


async def process_loan_terms_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞"""
    is_valid, terms = validate_loan_terms(new_value)
    if not is_valid:
        raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7 30). –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

    if "loan_terms" not in offer:
        offer["loan_terms"] = {}

    offer["loan_terms"]["min_days"] = terms["min_days"]
    offer["loan_terms"]["max_days"] = terms["max_days"]

    await message.answer(
        f"‚úÖ <b>–°—Ä–æ–∫–∏ –∑–∞–π–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üìÖ –ú–∏–Ω–∏–º—É–º: {terms['min_days']} –¥–Ω–µ–π\n"
        f"üìÖ –ú–∞–∫—Å–∏–º—É–º: {terms['max_days']} –¥–Ω–µ–π",
        parse_mode="HTML"
    )
    return True


async def process_metrics_field(offer: dict, new_value: str, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è CPA –º–µ—Ç—Ä–∏–∫"""
    success, metrics = parse_metrics(new_value)
    if not success:
        raise ValueError(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 54.9 4.2 102.01 185.98\n"
            "‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å —Å–∞–π—Ç–∞: CR: 54.9% AR: 4.2% ..."
        )

    if "metrics" not in offer:
        offer["metrics"] = {}

    offer["metrics"].update(metrics)

    await message.answer(
        f"‚úÖ <b>–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
        f"üìà CR: {metrics['cr']}%\n"
        f"üìà AR: {metrics['ar']}%\n"
        f"üí∞ EPC: {metrics['epc']} ‚ÇΩ\n"
        f"üí∞ EPL: {metrics['epl']} ‚ÇΩ",
        parse_mode="HTML"
    )
    return True


def register_edit_value_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π"""
    dp.message.register(process_edit_value, EditStates.waiting_value)