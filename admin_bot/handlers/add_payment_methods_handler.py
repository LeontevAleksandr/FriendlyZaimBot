"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
"""
import logging
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from admin_bot.config.auth import is_admin
from admin_bot.config.constants import PAYMENT_METHODS
from admin_bot.states.add_offer_states import AddOfferStates
from admin_bot.keyboards.payment_keyboards import get_payment_methods_keyboard
from admin_bot.utils.formatters import format_payment_methods
from admin_bot.utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)


async def handle_add_offer_payment_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        return

    data = await state.get_data()
    current_methods = data.get('payment_methods', [])
    action = callback.data.replace("payment_", "")

    if action == "all":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É "–≤—Å–µ —Å–ø–æ—Å–æ–±—ã" –∏ "–Ω–∏–∫–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã"
        current_methods = [] if len(current_methods) == len(PAYMENT_METHODS) else list(PAYMENT_METHODS.keys())
    elif action == "reset":
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
        current_methods = []
    elif action == "done":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        if not current_methods:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è")
            return

        await state.update_data(payment_methods=current_methods)
        await state.set_state(AddOfferStates.logo)

        methods_text = format_payment_methods(current_methods)

        await safe_edit_message(
            callback.message,
            f"‚úÖ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã:</b>\n{methods_text}\n\n"
            f"üñºÔ∏è <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:</b> –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –ú–§–û\n\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç\n"
            f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: –¥–æ 2MB\n\n"
            f"üí° <i>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –æ—Ñ—Ñ–µ—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>",
            parse_mode="HTML"
        )
        return
    elif action in PAYMENT_METHODS:
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        if action in current_methods:
            current_methods.remove(action)
        else:
            current_methods.append(action)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await state.update_data(payment_methods=current_methods)

    text = (
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"üìä <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>\n{format_payment_methods(current_methods)}\n\n"
        f"üîß –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:"
    )

    await safe_edit_message(
        callback.message,
        text,
        reply_markup=get_payment_methods_keyboard(current_methods, show_back=False)
    )


def register_add_payment_methods_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞"""
    dp.callback_query.register(
        handle_add_offer_payment_selection,
        F.data.startswith("payment_"),
        AddOfferStates.payment_methods
    )