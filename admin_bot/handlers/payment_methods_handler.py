"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
"""
import logging
from datetime import datetime
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from admin_bot.config.auth import is_admin
from admin_bot.config.constants import PAYMENT_METHODS
from admin_bot.states.edit_states import PaymentMethodsStates
from admin_bot.keyboards.offer_keyboards import edit_keyboard
from admin_bot.keyboards.payment_keyboards import get_payment_methods_keyboard
from admin_bot.utils.offer_manager import load_offers, save_offers, update_offer_timestamp
from admin_bot.utils.formatters import format_offer_info, format_payment_methods
from admin_bot.utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)


async def handle_payment_method_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"""
    if not is_admin(callback.from_user.id):
        return

    data = await state.get_data()
    current_methods = data.get('current_methods', [])
    action = callback.data.replace("payment_", "")

    if action == "all":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É "–≤—Å–µ —Å–ø–æ—Å–æ–±—ã" –∏ "–Ω–∏–∫–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã"
        current_methods = [] if len(current_methods) == len(PAYMENT_METHODS) else list(PAYMENT_METHODS.keys())
    elif action == "reset":
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
        current_methods = []
    elif action == "done":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤
        offer_id = data.get('offer_id')
        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)

        if offer:
            offer['payment_methods'] = current_methods
            offer = update_offer_timestamp(offer)
            offers["microloans"][offer_id] = offer
            save_offers(offers)

            await callback.answer("‚úÖ –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await state.clear()

            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞
            text = format_offer_info(offer, offer_id)
            await safe_edit_message(callback.message, text, reply_markup=edit_keyboard(offer_id))
            return
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
    elif action in PAYMENT_METHODS:
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        if action in current_methods:
            current_methods.remove(action)
        else:
            current_methods.append(action)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await state.update_data(current_methods=current_methods)

    text = (
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"üìä <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>\n{format_payment_methods(current_methods)}\n\n"
        f"üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:"
    )
    await safe_edit_message(
        callback.message,
        text,
        reply_markup=get_payment_methods_keyboard(current_methods)
    )


def register_payment_methods_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    dp.callback_query.register(
        handle_payment_method_selection,
        F.data.startswith("payment_"),
        PaymentMethodsStates.selecting
    )