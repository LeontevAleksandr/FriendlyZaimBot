import asyncio
import json
import os
import re
import sys
from datetime import datetime
from typing import Dict, Tuple, List
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN', 'YOUR_ADMIN_BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '123456789').split(',')]
DATA_DIR = 'data'
OFFERS_FILE = os.path.join(DATA_DIR, 'offers.json')
IMAGES_DIR = os.path.join(DATA_DIR, 'images', 'logos')

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

PAYMENT_METHODS = {
    "bank_card": {"name": "üí≥ –ö–∞—Ä—Ç–∞ –±–∞–Ω–∫–∞", "emoji": "üí≥"},
    "bank_account": {"name": "üè¶ –°—á–µ—Ç –≤ –±–∞–Ω–∫–µ", "emoji": "üè¶"},
    "yandex_money": {"name": "üü° –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏", "emoji": "üü°"},
    "qiwi": {"name": "ü•ù QIWI", "emoji": "ü•ù"},
    "contact": {"name": "üìû –ö–æ–Ω—Ç–∞–∫—Ç", "emoji": "üìû"},
    "cash": {"name": "üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "emoji": "üíµ"}
}


class AddOfferStates(StatesGroup):
    name = State()
    countries = State()
    amounts = State()
    age = State()
    loan_terms = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞
    zero_percent = State()
    description = State()
    russia_link = State()
    kazakhstan_link = State()
    metrics = State()
    priority = State()
    payment_methods = State()
    logo = State()


class EditStates(StatesGroup):
    waiting_value = State()


class PaymentMethodsStates(StatesGroup):
    selecting = State()


def load_offers() -> Dict:
    if not os.path.exists(OFFERS_FILE):
        return {"microloans": {}}
    try:
        with open(OFFERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {"microloans": {}}


def save_offers(data: Dict):
    with open(OFFERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def generate_offer_id() -> str:
    offers = load_offers()
    existing_ids = list(offers.get('microloans', {}).keys())
    max_num = 0
    for offer_id in existing_ids:
        if offer_id.startswith('offer_'):
            try:
                max_num = max(max_num, int(offer_id.split('_')[1]))
            except:
                continue
    return f"offer_{max_num + 1:03d}"


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def parse_metrics(text: str) -> Tuple[bool, Dict]:
    text = text.strip()

    # –§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    space_match = re.match(r'^(\d+\.?\d*)\s+(\d+\.?\d*)\s+(\d+\.?\d*)\s+(\d+\.?\d*)$', text)
    if space_match:
        try:
            cr, ar, epc, epl = map(float, space_match.groups())
            return True, {"cr": cr, "ar": ar, "epc": epc, "epl": epl}
        except:
            pass

    # –§–æ—Ä–º–∞—Ç: –∏–∑ —Å–∞–π—Ç–∞ —Å –º–µ—Ç–∫–∞–º–∏
    patterns = {"cr": r'CR:?\s*(\d+\.?\d*)%?', "ar": r'AR:?\s*(\d+\.?\d*)%?',
                "epc": r'EPC:?\s*(\d+\.?\d*)', "epl": r'EPL:?\s*(\d+\.?\d*)'}
    metrics = {}
    for name, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            try:
                metrics[name] = float(match.group(1))
            except:
                continue

    return len(metrics) == 4, metrics


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return ""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def format_payment_methods(methods: List[str]) -> str:
    if not methods:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã"
    if len(methods) == len(PAYMENT_METHODS):
        return "‚úÖ –í—Å–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
    return "\n".join(f"   ‚Ä¢ {PAYMENT_METHODS[m]['name']}" for m in methods if m in PAYMENT_METHODS)


def get_payment_methods_keyboard(current: List[str] = None, show_back: bool = True) -> InlineKeyboardMarkup:
    if current is None:
        current = []

    buttons = []
    all_selected = len(current) == len(PAYMENT_METHODS)
    buttons.append([InlineKeyboardButton(text="‚úÖ –í—Å–µ —Å–ø–æ—Å–æ–±—ã" if all_selected else "‚¨ú –í—Å–µ —Å–ø–æ—Å–æ–±—ã",
                                         callback_data="payment_all")])

    for method_id, method_info in PAYMENT_METHODS.items():
        is_selected = method_id in current
        text = f"‚úÖ {method_info['name']}" if is_selected else f"‚¨ú {method_info['name']}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"payment_{method_id}")])

    bottom_buttons = []
    if show_back:
        bottom_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back"))
    bottom_buttons.append(InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="payment_reset"))
    bottom_buttons.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="payment_done"))

    buttons.append(bottom_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def format_offer_info(offer: Dict, offer_id: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ñ—Ñ–µ—Ä–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç HTML"""
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if offer.get('status', {}).get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    countries = offer.get('geography', {}).get('countries', [])
    countries_text = ", ".join(countries)
    zero_text = "‚úÖ –ï—Å—Ç—å" if offer.get('zero_percent', False) else "‚ùå –ù–µ—Ç"

    metrics = offer.get('metrics', {})
    cr, ar, epc, epl = metrics.get('cr', 0), metrics.get('ar', 0), metrics.get('epc', 0), metrics.get('epl', 0)

    geography = offer.get('geography', {})
    ru_link = geography.get('russia_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    kz_link = geography.get('kazakhstan_link') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω
    has_russia = 'russia' in countries
    has_kazakhstan = 'kazakhstan' in countries

    if has_russia and has_kazakhstan:
        currency_text = f"{offer['limits']['min_amount']:,} - {offer['limits']['max_amount']:,} ‚ÇΩ/‚Ç∏"
    elif has_kazakhstan:
        currency_text = f"{offer['limits']['min_amount']:,} - {offer['limits']['max_amount']:,} ‚Ç∏"
    else:
        currency_text = f"{offer['limits']['min_amount']:,} - {offer['limits']['max_amount']:,} ‚ÇΩ"

    # –í–∞–ª—é—Ç–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ —Å—Ç—Ä–∞–Ω—ã
    if has_russia and has_kazakhstan:
        epc_currency = "‚ÇΩ/‚Ç∏"
        epl_currency = "‚ÇΩ/‚Ç∏"
    elif has_kazakhstan:
        epc_currency = "‚Ç∏"
        epl_currency = "‚Ç∏"
    else:
        epc_currency = "‚ÇΩ"
        epl_currency = "‚ÇΩ"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
    ru_link_short = escape_html((ru_link[:50] + '...') if ru_link and len(ru_link) > 50 else ru_link)
    kz_link_short = escape_html((kz_link[:50] + '...') if kz_link != '–ù–µ —É–∫–∞–∑–∞–Ω–∞' and len(kz_link) > 50 else kz_link)

    logo = offer.get('logo')
    logo_status = f"‚úÖ {escape_html(logo)}" if logo else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    payment_methods_text = format_payment_methods(offer.get('payment_methods', []))

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞
    loan_terms = offer.get('loan_terms', {})
    if loan_terms:
        loan_terms_text = f"{loan_terms.get('min_days', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {loan_terms.get('max_days', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –¥–Ω–µ–π"
    else:
        loan_terms_text = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    created = offer.get('status', {}).get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    updated = offer.get('status', {}).get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    for dt_str in [created, updated]:
        if dt_str != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
                if dt_str == created:
                    created = dt.strftime('%d.%m.%Y %H:%M')
                else:
                    updated = dt.strftime('%d.%m.%Y %H:%M')
            except:
                pass

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    offer_name = escape_html(offer.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
    description = escape_html(offer.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

    return (
        f"‚úèÔ∏è <b>–û—Ñ—Ñ–µ—Ä {escape_html(offer_id)}</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {offer_name}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω—ã:</b> {countries_text}\n\n"
        f"üí∞ <b>–õ–∏–º–∏—Ç—ã:</b>\n   ‚Ä¢ –°—É–º–º–∞: {currency_text}\n"
        f"   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {offer['limits']['min_age']} - {offer['limits']['max_age']} –ª–µ—Ç\n"
        f"   ‚Ä¢ –°—Ä–æ–∫ –∑–∞–π–º–∞: {loan_terms_text}\n\n"
        f"üéØ <b>–£—Å–ª–æ–≤–∏—è:</b>\n   ‚Ä¢ 0% –¥–ª—è –Ω–æ–≤—ã—Ö: {zero_text}\n   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n{payment_methods_text}\n\n"
        f"üìà <b>CPA –ú–µ—Ç—Ä–∏–∫–∏:</b>\n   ‚Ä¢ CR: {cr}%\n   ‚Ä¢ AR: {ar}%\n   ‚Ä¢ EPC: {epc} {epc_currency}\n   ‚Ä¢ EPL: {epl} {epl_currency}\n\n"
        f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {offer['priority']['manual_boost']}/10\n"
        f"üñºÔ∏è <b>–õ–æ–≥–æ—Ç–∏–ø:</b> {logo_status}\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∏:</b>\n   ‚Ä¢ –†–§: {ru_link_short}\n   ‚Ä¢ –ö–ó: {kz_link_short}\n\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created}\nüìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {updated}"
    )


def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", callback_data="add_offer")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="list_offers")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")]
    ])


def offers_keyboard(offers: Dict) -> InlineKeyboardMarkup:
    buttons = []
    sorted_offers = sorted(offers.get('microloans', {}).items(),
                           key=lambda x: (x[1].get('priority', {}).get('manual_boost', 0),
                                          x[1].get('metrics', {}).get('cr', 0)), reverse=True)

    for offer_id, offer in sorted_offers:
        status = "‚úÖ" if offer.get('status', {}).get('is_active', True) else "‚ùå"
        priority = offer.get('priority', {}).get('manual_boost', 5)
        cr = offer.get('metrics', {}).get('cr', 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω
        countries = offer.get('geography', {}).get('countries', [])
        if 'russia' in countries and 'kazakhstan' in countries:
            currency_icon = "‚ÇΩ/‚Ç∏"
        elif 'kazakhstan' in countries:
            currency_icon = "‚Ç∏"
        else:
            currency_icon = "‚ÇΩ"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        safe_name = escape_html(offer.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))[:25]  # –û–≥—Ä–∞–∏—á–∏–≤–∞–µ–º –¥–ª—è –º–µ—Å—Ç–∞ –≤–∞–ª—é—Ç—ã
        text = f"{status} {safe_name} {currency_icon} (P:{priority}, CR:{cr}%)"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"edit_{offer_id}")])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def edit_keyboard(offer_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"field_{offer_id}_name")],
        [InlineKeyboardButton(text="üéØ 0% –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"field_{offer_id}_zero")],
        [InlineKeyboardButton(text="üí∞ –°—É–º–º—ã", callback_data=f"field_{offer_id}_amounts")],
        [InlineKeyboardButton(text="üë§ –í–æ–∑—Ä–∞—Å—Ç", callback_data=f"field_{offer_id}_age")],
        [InlineKeyboardButton(text="üìÖ –°—Ä–æ–∫–∏ –∑–∞–π–º–∞", callback_data=f"field_{offer_id}_loan_terms")],
        [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"field_{offer_id}_desc")],
        [InlineKeyboardButton(text="üí≥ –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è", callback_data=f"field_{offer_id}_payment_methods")],
        [InlineKeyboardButton(text="üìà CPA –º–µ—Ç—Ä–∏–∫–∏", callback_data=f"field_{offer_id}_metrics")],
        [InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –†–§", callback_data=f"field_{offer_id}_ru_link")],
        [InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –ö–ó", callback_data=f"field_{offer_id}_kz_link")],
        [InlineKeyboardButton(text="üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø", callback_data=f"field_{offer_id}_logo")],
        [InlineKeyboardButton(text="‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"field_{offer_id}_priority")],
        [InlineKeyboardButton(text="üîÑ –í–∫–ª/–í—ã–∫–ª", callback_data=f"toggle_{offer_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{offer_id}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="list_offers")]
    ])


async def safe_edit_message(message, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(text) > 4096:
            text = text[:4000] + "\n\n... (—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"

        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await message.delete()
            await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=reply_markup)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–π–º–æ–≤</b>", reply_markup=main_keyboard(), parse_mode="HTML")


@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return
    await safe_edit_message(callback.message, "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–π–º–æ–≤</b>", reply_markup=main_keyboard())


@dp.callback_query(F.data == "restart_bot")
async def restart_bot(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await safe_edit_message(callback.message,
                            "üîÑ <b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ /start")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    await bot.session.close()

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    os.execv(sys.executable, ['python'] + sys.argv)


@dp.callback_query(F.data == "list_offers")
async def list_offers(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    try:
        offers = load_offers()
        if not offers.get("microloans"):
            await safe_edit_message(callback.message, "üìã –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=main_keyboard())
            return

        text = f"üìã <b>–û—Ñ—Ñ–µ—Ä—ã ({len(offers['microloans'])})</b>"
        await safe_edit_message(callback.message, text, reply_markup=offers_keyboard(offers))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_offers: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤")


@dp.callback_query(F.data.startswith("edit_"))
async def view_offer(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    try:
        offer_id = callback.data.replace("edit_", "")
        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)

        if not offer:
            await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = format_offer_info(offer, offer_id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if offer.get('logo'):
            logo_path = os.path.join(IMAGES_DIR, offer['logo'])
            if os.path.exists(logo_path):
                try:
                    photo = FSInputFile(logo_path)
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=text,
                        reply_markup=edit_keyboard(offer_id),
                        parse_mode="HTML"
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        await safe_edit_message(callback.message, text, reply_markup=edit_keyboard(offer_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_offer: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞")


@dp.callback_query(F.data.startswith("field_"))
async def edit_field(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    try:
        data_part = callback.data.replace("field_", "")

        if data_part.endswith("_ru_link"):
            offer_id, field = data_part.replace("_ru_link", ""), "ru_link"
        elif data_part.endswith("_kz_link"):
            offer_id, field = data_part.replace("_kz_link", ""), "kz_link"
        elif data_part.endswith("_payment_methods"):
            offer_id, field = data_part.replace("_payment_methods", ""), "payment_methods"
        elif data_part.endswith("_loan_terms"):
            offer_id, field = data_part.replace("_loan_terms", ""), "loan_terms"
        else:
            parts = data_part.rsplit("_", 1)
            if len(parts) != 2:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
                return
            offer_id, field = parts

        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)
        if not offer:
            await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if field == "zero":
            current_zero = offer.get('zero_percent', False)
            offer['zero_percent'] = not current_zero
            offer['status']['updated_at'] = datetime.now().isoformat()
            save_offers(offers)
            await callback.answer(f"0% {'–≤–∫–ª—é—á–µ–Ω' if not current_zero else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            await view_offer(callback)
            return

        if field == "payment_methods":
            current_methods = offer.get('payment_methods', [])
            await state.set_state(PaymentMethodsStates.selecting)
            await state.update_data(offer_id=offer_id, current_methods=current_methods)

            text = f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüìä <b>–¢–µ–∫—É—â–∏–µ —Å–ø–æ—Å–æ–±—ã:</b>\n{format_payment_methods(current_methods)}\n\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:"
            await safe_edit_message(callback.message, text, reply_markup=get_payment_methods_keyboard(current_methods))
            return

        if field == "logo":
            logo_status = f"‚úÖ {escape_html(offer.get('logo'))}" if offer.get('logo') else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
            await state.set_state(EditStates.waiting_value)
            await state.update_data(offer_id=offer_id, field=field)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_offer_{offer_id}")]
            ])

            text = f"üñºÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞</b>\n\nüìä <b>–¢–µ–∫—É—â–∏–π –ª–æ–≥–æ—Ç–∏–ø:</b> {logo_status}\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏:\n‚Ä¢ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–æ–≥–æ—Ç–∏–ø\n‚Ä¢ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
            await safe_edit_message(callback.message, text, reply_markup=back_keyboard)
            return

        await state.set_state(EditStates.waiting_value)
        await state.update_data(offer_id=offer_id, field=field)

        current_values = {
            "name": escape_html(offer.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
            "desc": escape_html(offer.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
            "amounts": f"{offer['limits']['min_amount']} {offer['limits']['max_amount']}",
            "age": f"{offer['limits']['min_age']} {offer['limits']['max_age']}",
            "loan_terms": f"{offer.get('loan_terms', {}).get('min_days', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {offer.get('loan_terms', {}).get('max_days', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" if offer.get(
                'loan_terms') else "–ù–µ —É–∫–∞–∑–∞–Ω—ã",
            "ru_link": escape_html(offer.get('geography', {}).get('russia_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')),
            "kz_link": escape_html(offer.get('geography', {}).get('kazakhstan_link') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            "priority": str(offer.get('priority', {}).get('manual_boost', 0)),
            "metrics": f"CR: {offer.get('metrics', {}).get('cr', 0)}%, AR: {offer.get('metrics', {}).get('ar', 0)}%, EPC: {offer.get('metrics', {}).get('epc', 0)}, EPL: {offer.get('metrics', {}).get('epl', 0)}"
        }

        field_prompts = {
            "name": f"üìù <b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{current_values['name']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            "desc": f"üìù <b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{current_values['desc']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "amounts": f"üí∞ <b>–¢–µ–∫—É—â–∏–µ —Å—É–º–º—ã:</b> <i>{current_values['amounts']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—É–º–º—ã (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):",
            "age": f"üë§ <b>–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç:</b> <i>{current_values['age']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):",
            "loan_terms": f"üìÖ <b>–¢–µ–∫—É—â–∏–µ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞:</b> <i>{current_values['loan_terms']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ –≤ –¥–Ω—è—Ö (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5 30",
            "ru_link": f"üîó <b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –†–§:</b>\n<i>{current_values['ru_link']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –†–æ—Å—Å–∏–∏:",
            "kz_link": f"üîó <b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –ö–ó:</b>\n<i>{current_values['kz_link']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (–∏–ª–∏ '-'):",
            "priority": f"‚≠ê <b>–¢–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> <i>{current_values['priority']}</i>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10):",
            "metrics": f"üìà <b>–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n<i>{current_values['metrics']}</i>\n\nüìà <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ CPA –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:</b>\n\n<b>–°–ø–æ—Å–æ–± 1 - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n<code>54.9 4.2 102.01 185.98</code>\n(CR AR EPC EPL)\n\n<b>–°–ø–æ—Å–æ–± 2 - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–∞:</b>\n<code>CR: 54.9%\nAR: 4.2%\nEPC: 102.01\nEPL: 185.98</code>"
        }

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_offer_{offer_id}")]
        ])

        prompt_text = field_prompts.get(field, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
        await safe_edit_message(callback.message, prompt_text, reply_markup=back_keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_field: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è")


@dp.callback_query(F.data.startswith("back_to_offer_"))
async def back_to_offer(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    await state.clear()
    offer_id = callback.data.replace("back_to_offer_", "")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç callback —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è view_offer
    try:
        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)

        if not offer:
            await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = format_offer_info(offer, offer_id)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if offer.get('logo'):
            logo_path = os.path.join(IMAGES_DIR, offer['logo'])
            if os.path.exists(logo_path):
                try:
                    photo = FSInputFile(logo_path)
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=text,
                        reply_markup=edit_keyboard(offer_id),
                        parse_mode="HTML"
                    )
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        await safe_edit_message(callback.message, text, reply_markup=edit_keyboard(offer_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_offer: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É")


@dp.callback_query(F.data == "payment_back", PaymentMethodsStates.selecting)
async def payment_method_back(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    data = await state.get_data()
    offer_id = data.get('offer_id')
    await state.clear()

    if offer_id:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞
        try:
            offers = load_offers()
            offer = offers.get("microloans", {}).get(offer_id)

            if not offer:
                await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = format_offer_info(offer, offer_id)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if offer.get('logo'):
                logo_path = os.path.join(IMAGES_DIR, offer['logo'])
                if os.path.exists(logo_path):
                    try:
                        photo = FSInputFile(logo_path)
                        await callback.message.delete()
                        await callback.message.answer_photo(
                            photo=photo,
                            caption=text,
                            reply_markup=edit_keyboard(offer_id),
                            parse_mode="HTML"
                        )
                        return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            await safe_edit_message(callback.message, text, reply_markup=edit_keyboard(offer_id))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ payment_method_back: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ñ—Ñ–µ—Ä—É")
    else:
        await back_to_main(callback)


@dp.callback_query(F.data.startswith("payment_"), PaymentMethodsStates.selecting)
async def handle_payment_method_selection(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    data = await state.get_data()
    current_methods = data.get('current_methods', [])
    action = callback.data.replace("payment_", "")

    if action == "all":
        current_methods = [] if len(current_methods) == len(PAYMENT_METHODS) else list(PAYMENT_METHODS.keys())
    elif action == "reset":
        current_methods = []
    elif action == "done":
        offer_id = data.get('offer_id')
        offers = load_offers()
        offer = offers.get("microloans", {}).get(offer_id)

        if offer:
            offer['payment_methods'] = current_methods
            offer['status']['updated_at'] = datetime.now().isoformat()
            save_offers(offers)
            await callback.answer("‚úÖ –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await state.clear()

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ñ—Ñ–µ—Ä–∞
            text = format_offer_info(offer, offer_id)
            await safe_edit_message(callback.message, text, reply_markup=edit_keyboard(offer_id))
            return
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
    elif action in PAYMENT_METHODS:
        if action in current_methods:
            current_methods.remove(action)
        else:
            current_methods.append(action)

    await state.update_data(current_methods=current_methods)

    text = f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüìä <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>\n{format_payment_methods(current_methods)}\n\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:"
    await safe_edit_message(callback.message, text, reply_markup=get_payment_methods_keyboard(current_methods))


@dp.message(F.photo)
async def handle_photo_upload(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == EditStates.waiting_value.state and data.get('field') == 'logo':
        offer_id = data.get('offer_id')
        if not offer_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ—Ñ—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        try:
            offers = load_offers()
            offer = offers.get("microloans", {}).get(offer_id)
            if not offer:
                await message.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            if offer.get('logo'):
                old_logo_path = os.path.join(IMAGES_DIR, offer['logo'])
                if os.path.exists(old_logo_path):
                    os.remove(old_logo_path)

            photo = message.photo[-1]
            file_info = await bot.get_file(photo.file_id)
            file_extension = file_info.file_path.split('.')[
                -1] if file_info.file_path and '.' in file_info.file_path else 'jpg'
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            logo_filename = f"{offer_id}_{timestamp}.{file_extension}"
            logo_path = os.path.join(IMAGES_DIR, logo_filename)

            await bot.download_file(file_info.file_path, logo_path)

            offer['logo'] = logo_filename
            offer['status']['updated_at'] = datetime.now().isoformat()
            save_offers(offers)

            await message.answer(f"‚úÖ <b>–õ–æ–≥–æ—Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\nüìÅ <b>–§–∞–π–ª:</b> {escape_html(logo_filename)}",
                                 parse_mode="HTML")
            await message.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=edit_keyboard(offer_id))
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
            await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞</b>", parse_mode="HTML")
            await state.clear()

    elif current_state == AddOfferStates.logo.state:
        await handle_add_offer_logo(message, state)
    else:
        await message.answer(
            "üñºÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞:\nüìã –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä ‚Üí –Ω–∞–∂–º–∏—Ç–µ 'üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø'",
            parse_mode="HTML")


@dp.message(EditStates.waiting_value)
async def process_edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    offer_id = data.get("offer_id")
    field = data.get("field")
    new_value = message.text.strip() if message.text else ""

    if new_value.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=edit_keyboard(offer_id))
        return

    offers = load_offers()
    offer = offers.get("microloans", {}).get(offer_id)
    if not offer:
        await message.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        if field == "logo":
            if new_value == "-":
                if offer.get('logo'):
                    logo_path = os.path.join(IMAGES_DIR, offer['logo'])
                    if os.path.exists(logo_path):
                        os.remove(logo_path)
                offer['logo'] = None
                await message.answer("üóëÔ∏è <b>–õ–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª–µ–Ω</b>", parse_mode="HTML")
                offer["status"]["updated_at"] = datetime.now().isoformat()
                save_offers(offers)
                await message.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=edit_keyboard(offer_id))
                await state.clear()
                return
            else:
                await message.answer(
                    "üñºÔ∏è <b>–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ª–æ–≥–æ—Ç–∏–ø\n‚Ä¢ –ò–ª–∏ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                    parse_mode="HTML")
                return

        elif field == "name":
            offer["name"] = new_value
        elif field == "desc":
            offer["description"] = new_value
        elif field == "ru_link":
            offer["geography"]["russia_link"] = new_value
        elif field == "kz_link":
            offer["geography"]["kazakhstan_link"] = new_value if new_value != "-" else None
        elif field == "priority":
            priority = int(new_value)
            if not 0 <= priority <= 10:
                raise ValueError("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0-10")
            offer["priority"]["manual_boost"] = priority
            offer["priority"]["final_score"] = priority * 10
        elif field == "amounts":
            parts = new_value.split()
            if len(parts) != 2:
                raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å")
            offer["limits"]["min_amount"], offer["limits"]["max_amount"] = int(parts[0]), int(parts[1])
        elif field == "age":
            parts = new_value.split()
            if len(parts) != 2:
                raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å")
            offer["limits"]["min_age"], offer["limits"]["max_age"] = int(parts[0]), int(parts[1])
        elif field == "loan_terms":
            parts = new_value.split()
            if len(parts) != 2:
                raise ValueError("–§–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å")
            min_days, max_days = int(parts[0]), int(parts[1])
            if min_days <= 0 or max_days <= 0:
                raise ValueError("–î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            if min_days > max_days:
                raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")

            if "loan_terms" not in offer:
                offer["loan_terms"] = {}
            offer["loan_terms"]["min_days"] = min_days
            offer["loan_terms"]["max_days"] = max_days

            await message.answer(
                f"‚úÖ <b>–°—Ä–æ–∫–∏ –∑–∞–π–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\nüìÖ –ú–∏–Ω–∏–º—É–º: {min_days} –¥–Ω–µ–π\nüìÖ –ú–∞–∫—Å–∏–º—É–º: {max_days} –¥–Ω–µ–π",
                parse_mode="HTML")
        elif field == "metrics":
            success, metrics = parse_metrics(new_value)
            if not success:
                raise ValueError(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 54.9 4.2 102.01 185.98\n‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å —Å–∞–π—Ç–∞: CR: 54.9% ...")

            if "metrics" not in offer:
                offer["metrics"] = {}
            offer["metrics"].update(metrics)

            await message.answer(
                f"‚úÖ <b>–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\nüìà CR: {metrics['cr']}%\nüìà AR: {metrics['ar']}%\nüí∞ EPC: {metrics['epc']} ‚ÇΩ\nüí∞ EPL: {metrics['epl']} ‚ÇΩ",
                parse_mode="HTML")

        offer["status"]["updated_at"] = datetime.now().isoformat()
        save_offers(offers)

        if field not in ["metrics", "logo", "loan_terms"]:
            await message.answer("‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")

        await message.answer("üîß –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:", reply_markup=edit_keyboard(offer_id))

    except ValueError as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>", parse_mode="HTML")

    await state.clear()


async def handle_add_offer_logo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        offer_id = generate_offer_id()

        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_extension = file_info.file_path.split('.')[
            -1] if file_info.file_path and '.' in file_info.file_path else 'jpg'
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        logo_filename = f"{offer_id}_{timestamp}.{file_extension}"
        logo_path = os.path.join(IMAGES_DIR, logo_filename)

        await bot.download_file(file_info.file_path, logo_path)
        await create_offer_with_data(data, offer_id, logo_filename, message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞</b>", parse_mode="HTML")
        await state.clear()


async def create_offer_with_data(data: Dict, offer_id: str, logo_filename: str, message: Message, state: FSMContext):
    now = datetime.now().isoformat()

    offer = {
        "id": offer_id, "name": data["name"], "logo": logo_filename,
        "geography": {"countries": data["countries"], "russia_link": data["russia_link"],
                      "kazakhstan_link": data.get("kazakhstan_link")},
        "limits": {"min_amount": data["min_amount"], "max_amount": data["max_amount"], "min_age": data["min_age"],
                   "max_age": data["max_age"]},
        "loan_terms": {"min_days": data.get("min_days", 5), "max_days": data.get("max_days", 30)},
        "zero_percent": data["zero_percent"], "description": data["description"],
        "payment_methods": data.get("payment_methods", []),
        "metrics": data["metrics"],
        "priority": {"manual_boost": data["priority"], "final_score": data["priority"] * 10},
        "status": {"is_active": True, "created_at": now, "updated_at": now}
    }

    offers = load_offers()
    offers["microloans"][offer_id] = offer
    save_offers(offers)

    metrics = data["metrics"]
    logo_status = f"‚úÖ {escape_html(logo_filename)}" if logo_filename else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    payment_methods_text = format_payment_methods(data.get("payment_methods", []))
    safe_name = escape_html(data['name'])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è EPC –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω
    countries = data.get("countries", [])
    if 'kazakhstan' in countries and 'russia' not in countries:
        epc_currency = "‚Ç∏"
    elif 'russia' in countries and 'kazakhstan' in countries:
        epc_currency = "‚ÇΩ/‚Ç∏"
    else:
        epc_currency = "‚ÇΩ"

    await message.answer(
        f"‚úÖ <b>–û—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω!</b>\n\nüè∑Ô∏è <b>ID:</b> {offer_id}\nüìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {safe_name}\n‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {data['priority']}\nüìà <b>CR:</b> {metrics['cr']}%\nüí∞ <b>EPC:</b> {metrics['epc']} {epc_currency}\nüñºÔ∏è <b>–õ–æ–≥–æ—Ç–∏–ø:</b> {logo_status}\nüí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n{payment_methods_text}",
        reply_markup=main_keyboard(), parse_mode="HTML")
    await state.clear()


@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_offer(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    offer_id = callback.data.replace("toggle_", "")
    offers = load_offers()
    offer = offers.get("microloans", {}).get(offer_id)

    if not offer:
        await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    current_status = offer.get('status', {}).get('is_active', True)
    new_status = not current_status

    offer['status']['is_active'] = new_status
    offer['status']['updated_at'] = datetime.now().isoformat()

    if not new_status:
        offer['priority']['manual_boost'] = 0
        offer['priority']['final_score'] = 0
    else:
        if offer['priority']['manual_boost'] == 0:
            offer['priority']['manual_boost'] = 1
            offer['priority']['final_score'] = 10

    save_offers(offers)
    await callback.answer(f"{'‚úÖ –í–∫–ª—é—á–µ–Ω' if new_status else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
    await view_offer(callback)


@dp.callback_query(F.data.startswith("delete_"))
async def delete_offer(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    offer_id = callback.data.replace("delete_", "")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{offer_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_{offer_id}")
        ]
    ])

    await safe_edit_message(callback.message,
                            f"‚ùó <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä?",
                            reply_markup=confirm_keyboard)


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_offer(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    offer_id = callback.data.replace("confirm_delete_", "")
    offers = load_offers()

    if offer_id in offers.get("microloans", {}):
        offer = offers["microloans"][offer_id]
        if offer.get('logo'):
            logo_path = os.path.join(IMAGES_DIR, offer['logo'])
            if os.path.exists(logo_path):
                os.remove(logo_path)

        del offers["microloans"][offer_id]
        save_offers(offers)
        await callback.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω")
        await safe_edit_message(callback.message, "üóëÔ∏è –û—Ñ—Ñ–µ—Ä —É–¥–∞–ª–µ–Ω", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        return

    try:
        offers = load_offers()
        microloans = offers.get("microloans", {})

        active_offers = sum(1 for offer in microloans.values() if offer.get('status', {}).get('is_active', True))
        total_offers = len(microloans)

        if total_offers > 0:
            avg_cr = sum(offer.get('metrics', {}).get('cr', 0) for offer in microloans.values()) / total_offers
            avg_ar = sum(offer.get('metrics', {}).get('ar', 0) for offer in microloans.values()) / total_offers
            avg_epc = sum(offer.get('metrics', {}).get('epc', 0) for offer in microloans.values()) / total_offers
        else:
            avg_cr = avg_ar = avg_epc = 0

        top_offers = sorted([(offer_id, offer) for offer_id, offer in microloans.items()],
                            key=lambda x: x[1].get('metrics', {}).get('cr', 0), reverse=True)[:3]
        top_text = "\n".join(f"{i}. {escape_html(offer['name'])}: {offer.get('metrics', {}).get('cr', 0)}%"
                             for i, (_, offer) in enumerate(top_offers, 1)) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        payment_stats = {}
        for offer in microloans.values():
            for method in offer.get('payment_methods', []):
                if method in PAYMENT_METHODS:
                    payment_stats[method] = payment_stats.get(method, 0) + 1

        payment_stats_text = "\n".join(
            f"{PAYMENT_METHODS[method_id]['emoji']} {PAYMENT_METHODS[method_id]['name'].replace(PAYMENT_METHODS[method_id]['emoji'] + ' ', '')}: {count}"
            for method_id, count in sorted(payment_stats.items(), key=lambda x: x[1], reverse=True)) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\nüìã <b>–û—Ñ—Ñ–µ—Ä—ã:</b>\n   ‚Ä¢ –í—Å–µ–≥–æ: {total_offers}\n   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_offers}\n   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_offers - active_offers}\n\n"
            f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n   ‚Ä¢ CR: {avg_cr:.1f}%\n   ‚Ä¢ AR: {avg_ar:.1f}%\n   ‚Ä¢ EPC: {avg_epc:.1f} ‚ÇΩ\n\n"
            f"üèÜ <b>–¢–û–ü –ø–æ CR:</b>\n{top_text}\n\nüí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n{payment_stats_text}")

        await safe_edit_message(callback.message, text,
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.callback_query(F.data == "add_offer")
async def add_offer_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return
    await state.set_state(AddOfferStates.name)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
    ])

    await safe_edit_message(callback.message,
                            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ú–§–û:",
                            reply_markup=cancel_keyboard)


@dp.callback_query(F.data == "cancel_add_offer")
async def cancel_add_offer(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    await state.clear()
    await safe_edit_message(callback.message, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())


@dp.message(AddOfferStates.name)
async def add_offer_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddOfferStates.countries)
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
        [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")],
        [InlineKeyboardButton(text="üåç –û–±–µ", callback_data="country_both")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
    ]))


@dp.callback_query(F.data.startswith("country_"))
async def add_offer_countries(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.replace("country_", "")
    countries = {"russia": ["russia"], "kazakhstan": ["kazakhstan"], "both": ["russia", "kazakhstan"]}[choice]
    await state.update_data(countries=countries)
    await state.set_state(AddOfferStates.amounts)
    await safe_edit_message(callback.message,
                            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—ã (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 30000\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")


@dp.message(AddOfferStates.amounts)
async def add_offer_amounts(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ 2 —á–∏—Å–ª–∞")
        await state.update_data(min_amount=int(parts[0]), max_amount=int(parts[1]))
        await state.set_state(AddOfferStates.age)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 18 70\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


@dp.message(AddOfferStates.age)
async def add_offer_age(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ 2 —á–∏—Å–ª–∞")
        await state.update_data(min_age=int(parts[0]), max_age=int(parts[1]))
        await state.set_state(AddOfferStates.loan_terms)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞ –≤ –¥–Ω—è—Ö (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω –º–∞–∫—Å):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5 30\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")


@dp.message(AddOfferStates.loan_terms)
async def add_offer_loan_terms(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ 2 —á–∏—Å–ª–∞")
        min_days, max_days = int(parts[0]), int(parts[1])
        if min_days <= 0 or max_days <= 0:
            raise ValueError("–î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        if min_days > max_days:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ")

        await state.update_data(min_days=min_days, max_days=max_days)
        await state.set_state(AddOfferStates.zero_percent)
        await message.answer("üéØ –ï—Å—Ç—å –ª–∏ 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="zero_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="zero_no")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_offer")]
        ]))
    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")


@dp.callback_query(F.data.startswith("zero_"))
async def add_offer_zero(callback: CallbackQuery, state: FSMContext):
    await state.update_data(zero_percent=callback.data == "zero_yes")
    await state.set_state(AddOfferStates.description)
    await safe_edit_message(callback.message,
                            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")


@dp.message(AddOfferStates.description)
async def add_offer_description(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    await state.update_data(description=message.text.strip())
    await state.set_state(AddOfferStates.russia_link)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –†–æ—Å—Å–∏–∏:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")


@dp.message(AddOfferStates.russia_link)
async def add_offer_russia_link(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    await state.update_data(russia_link=message.text.strip())
    data = await state.get_data()

    if "kazakhstan" in data.get("countries", []):
        await state.set_state(AddOfferStates.kazakhstan_link)
        await message.answer(
            "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (–∏–ª–∏ '-'):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")
    else:
        await state.set_state(AddOfferStates.metrics)
        await message.answer(
            "üìà <b>–í–≤–µ–¥–∏—Ç–µ CPA –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:</b>\n\n<b>–°–ø–æ—Å–æ–± 1 - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n<code>54.9 4.2 102.01 185.98</code>\n(CR AR EPC EPL)\n\n<b>–°–ø–æ—Å–æ–± 2 - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–∞:</b>\n<code>CR: 54.9%\nAR: 4.2%\nEPC: 102.01\nEPL: 185.98</code>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è",
            parse_mode="HTML")


@dp.message(AddOfferStates.kazakhstan_link)
async def add_offer_kazakhstan_link(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    await state.update_data(kazakhstan_link=message.text.strip() if message.text.strip() != "-" else None)
    await state.set_state(AddOfferStates.metrics)
    await message.answer(
        "üìà <b>–í–≤–µ–¥–∏—Ç–µ CPA –º–µ—Ç—Ä–∏–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:</b>\n\n<b>–°–ø–æ—Å–æ–± 1 - —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n<code>54.9 4.2 102.01 185.98</code>\n(CR AR EPC EPL)\n\n<b>–°–ø–æ—Å–æ–± 2 - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∞–π—Ç–∞:</b>\n<code>CR: 54.9%\nAR: 4.2%\nEPC: 102.01\nEPL: 185.98</code>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è",
        parse_mode="HTML")


@dp.message(AddOfferStates.metrics)
async def add_offer_metrics(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        success, metrics = parse_metrics(message.text)
        if not success:
            raise ValueError(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: 54.9 4.2 102.01 185.98\n‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å —Å–∞–π—Ç–∞: CR: 54.9% ...")

        await state.update_data(metrics=metrics)
        await state.set_state(AddOfferStates.priority)
        await message.answer(
            f"‚úÖ <b>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã:</b>\nüìà CR: {metrics['cr']}%\nüìà AR: {metrics['ar']}%\nüí∞ EPC: {metrics['epc']} ‚ÇΩ\nüí∞ EPL: {metrics['epl']} ‚ÇΩ\n\n‚≠ê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10):\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è",
            parse_mode="HTML")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(AddOfferStates.priority)
async def add_offer_priority(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    try:
        priority = int(message.text.strip())
        if not 1 <= priority <= 10:
            raise ValueError("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
        await state.update_data(priority=priority)
        await state.set_state(AddOfferStates.payment_methods)
        await message.answer(
            "üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞:",
            reply_markup=get_payment_methods_keyboard([], show_back=False), parse_mode="HTML")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data.startswith("payment_"), AddOfferStates.payment_methods)
async def handle_add_offer_payment_methods(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    data = await state.get_data()
    current_methods = data.get('payment_methods_temp', [])
    action = callback.data.replace("payment_", "")

    if action == "all":
        current_methods = [] if len(current_methods) == len(PAYMENT_METHODS) else list(PAYMENT_METHODS.keys())
    elif action == "reset":
        current_methods = []
    elif action == "done":
        await state.update_data(payment_methods=current_methods)
        await state.set_state(AddOfferStates.logo)
        await safe_edit_message(callback.message,
                                f"‚úÖ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã:</b>\n{format_payment_methods(current_methods)}\n\nüñºÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞</b>\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –ú–§–û –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 1 –ú–ë\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è")
        return
    elif action in PAYMENT_METHODS:
        if action in current_methods:
            current_methods.remove(action)
        else:
            current_methods.append(action)

    await state.update_data(payment_methods_temp=current_methods)
    text = f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüìä <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:</b>\n{format_payment_methods(current_methods)}\n\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:"
    await safe_edit_message(callback.message, text,
                            reply_markup=get_payment_methods_keyboard(current_methods, show_back=False))


@dp.message(AddOfferStates.logo)
async def add_offer_logo(message: Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return

    if message.text and message.text.strip() == "-":
        data = await state.get_data()
        offer_id = generate_offer_id()
        await create_offer_with_data(data, offer_id, None, message, state)
    else:
        await message.answer(
            "üñºÔ∏è <b>–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ—Ç–∏–ø–∞\n‚Ä¢ –ò–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è",
            parse_mode="HTML")


@dp.message(Command("check_offers"))
async def check_all_offers(message: Message):
    if not is_admin(message.from_user.id):
        return

    offers = load_offers()
    microloans = offers.get("microloans", {})

    if not microloans:
        await message.answer("üìã <b>–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ –±–∞–∑–µ</b>", parse_mode="HTML")
        return

    result = f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ ({len(microloans)}):</b>\n\n"

    sorted_offers = sorted(microloans.items(), key=lambda x: x[1].get('priority', {}).get('manual_boost', 0),
                           reverse=True)
    active_count = inactive_count = 0

    for offer_id, offer in sorted_offers:
        status = offer.get('status', {}).get('is_active', True)
        priority = offer.get('priority', {}).get('manual_boost', 0)
        cr = offer.get('metrics', {}).get('cr', 0)
        safe_name = escape_html(offer.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))

        if status:
            active_count += 1
            status_emoji = "‚úÖ"
        else:
            inactive_count += 1
            status_emoji = "‚ùå"

        result += f"{status_emoji} <b>{safe_name}</b>\n   P: {priority}/10, CR: {cr}%\n   ID: {offer_id}\n\n"

    result += f"üìà <b>–ò—Ç–æ–≥–æ:</b>\n   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n   ‚Ä¢ –í—Å–µ–≥–æ: {len(microloans)}"

    if len(result) > 4096:
        chunks = [result[i:i + 4000] for i in range(0, len(result), 4000)]
        for i, chunk in enumerate(chunks):
            await message.answer(chunk if i == 0 else f"<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i + 1}:</b>\n{chunk}", parse_mode="HTML")
    else:
        await message.answer(result, parse_mode="HTML")


@dp.message(Command("fix_inactive_offers"))
async def fix_inactive_offers(message: Message):
    if not is_admin(message.from_user.id):
        return

    offers = load_offers()
    fixed_count = 0

    for offer_id, offer in offers.get("microloans", {}).items():
        if not offer.get('status', {}).get('is_active', True):
            offer['status']['is_active'] = True
            offer['status']['updated_at'] = datetime.now().isoformat()
            fixed_count += 1

    if fixed_count > 0:
        save_offers(offers)
        await message.answer(
            f"‚úÖ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\nüìä –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {fixed_count}\n‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
            parse_mode="HTML")
    else:
        await message.answer("‚ÑπÔ∏è <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã", parse_mode="HTML")


@dp.message(Command("migrate_offers"))
async def migrate_offers_structure(message: Message):
    if not is_admin(message.from_user.id):
        return

    offers = load_offers()
    migrated_count = 0

    for offer_id, offer in offers.get("microloans", {}).items():
        updated = False

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        if "payment_methods" not in offer:
            offer["payment_methods"] = list(PAYMENT_METHODS.keys())
            updated = True

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞
        if "loan_terms" not in offer:
            offer["loan_terms"] = {"min_days": 5, "max_days": 30}
            updated = True

        if updated:
            offer["status"]["updated_at"] = datetime.now().isoformat()
            migrated_count += 1

    if migrated_count > 0:
        save_offers(offers)
        await message.answer(
            f"‚úÖ <b>–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ñ—Ñ–µ—Ä–æ–≤: {migrated_count}\nüí≥ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞",
            parse_mode="HTML")
    else:
        await message.answer("‚ÑπÔ∏è <b>–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n–í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
                             parse_mode="HTML")


@dp.message()
async def unknown_message(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", reply_markup=main_keyboard())


async def main():
    if not os.path.exists(OFFERS_FILE):
        save_offers({"microloans": {}})

    logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("üìà –ü–æ–¥–¥–µ—Ä–∂–∫–∞: CR, AR, EPC, EPL")
    logger.info("üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º")
    logger.info("üí≥ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
    logger.info("üìÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–π–º–∞")
    logger.info("‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö")
    logger.info("üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
    logger.info("üîß –ö–æ–º–∞–Ω–¥—ã: /start, /check_offers, /fix_inactive_offers, /migrate_offers")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–æ")