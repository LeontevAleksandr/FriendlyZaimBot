import json
import logging
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional, Any

from main_bot.config.settings import DB_FILE

logger = logging.getLogger(__name__)


class AnalyticsTracker:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î"""

    def __init__(self, db_file: str = DB_FILE):
        self.db_file = db_file

    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        return sqlite3.connect(self.db_file)

    async def track_user_start(self, user_id: int, username: str = None, first_name: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        conn = self.get_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("""
                UPDATE users SET last_activity = CURRENT_TIMESTAMP, username = ?, first_name = ?
                WHERE telegram_id = ?
            """, (username, first_name, user_id))

            if cursor.rowcount == 0:
                cursor.execute("""
                    INSERT INTO users (telegram_id, username, first_name, last_activity)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                """, (user_id, username, first_name))
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")

            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()

    async def track_session_start(self, user_id: int, age: int, country: str) -> Optional[int]:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–π–º–∞"""
        conn = self.get_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
            user_row = cursor.fetchone()

            if not user_row:
                return None

            db_user_id = user_row[0]

            cursor.execute("""
                INSERT INTO sessions (user_id, age, country, session_start)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            """, (db_user_id, age, country))

            session_id = cursor.lastrowid

            cursor.execute("""
                UPDATE users SET total_sessions = total_sessions + 1, last_activity = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (db_user_id,))

            conn.commit()
            logger.info(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: user={user_id}, session={session_id}")
            return session_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return None
        finally:
            conn.close()

    async def track_offers_shown(self, session_id: int, offer_ids: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤"""
        if not session_id:
            return

        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            offers_json = json.dumps(offer_ids)
            cursor.execute("UPDATE sessions SET shown_offers = ? WHERE id = ?", (offers_json, session_id))
            conn.commit()
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –æ—Ñ—Ñ–µ—Ä—ã –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {offer_ids}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤: {e}")
        finally:
            conn.close()

    async def track_session_parameters(self, session_id: int, amount: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Å—Å–∏–∏ (—Å—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞)"""
        if not session_id:
            return

        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute("UPDATE sessions SET amount_requested = ? WHERE id = ?", (amount, session_id))
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            conn.close()

    async def track_link_click(self, user_id: int, session_id: int, offer_id: str, country: str):
        """–ì–õ–ê–í–ù–ê–Ø –ú–ï–¢–†–ò–ö–ê: –ö–ª–∏–∫ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ"""
        conn = self.get_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
            user_row = cursor.fetchone()

            if not user_row:
                return

            db_user_id = user_row[0]

            cursor.execute("""
                INSERT INTO link_clicks (user_id, session_id, offer_id, country, clicked_at)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (db_user_id, session_id, offer_id, country))

            cursor.execute("""
                UPDATE users SET total_link_clicks = total_link_clicks + 1, last_activity = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (db_user_id,))

            if session_id:
                cursor.execute("""
                    UPDATE sessions SET completed = TRUE, clicked_offer_id = ?, session_end = CURRENT_TIMESTAMP
                    WHERE id = ?
                """, (offer_id, session_id))

            conn.commit()
            logger.info(f"üéØ –ö–õ–ò–ö –ü–û –°–°–´–õ–ö–ï: user={user_id}, offer={offer_id}, country={country}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∫–ª–∏–∫–∞: {e}")
        finally:
            conn.close()

    async def get_analytics_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            stats = {}

            cursor.execute(f"""
                SELECT 
                    COUNT(DISTINCT u.telegram_id) as total_users,
                    COUNT(DISTINCT s.id) as total_sessions,
                    COUNT(DISTINCT lc.id) as total_clicks,
                    COALESCE(AVG(CASE WHEN s.completed = 1 THEN 1.0 ELSE 0.0 END) * 100, 0) as completion_rate
                FROM users u
                LEFT JOIN sessions s ON u.id = s.user_id AND s.session_start >= datetime('now', '-{days} days')
                LEFT JOIN link_clicks lc ON u.id = lc.user_id AND lc.clicked_at >= datetime('now', '-{days} days')
                WHERE u.created_at >= datetime('now', '-{days} days') OR u.last_activity >= datetime('now', '-{days} days')
            """)

            row = cursor.fetchone()
            if row:
                stats.update({
                    'total_users': row[0],
                    'total_sessions': row[1],
                    'total_clicks': row[2],
                    'session_completion_rate': round(row[3], 2),
                    'click_through_rate': round((row[2] / row[1] * 100) if row[1] > 0 else 0, 2)
                })

            # –¢–æ–ø –æ—Ñ—Ñ–µ—Ä—ã –∏ —Å—Ç—Ä–∞–Ω—ã
            cursor.execute(
                f"SELECT offer_id, COUNT(*) FROM link_clicks WHERE clicked_at >= datetime('now', '-{days} days') GROUP BY offer_id ORDER BY COUNT(*) DESC LIMIT 5")
            stats['top_offers'] = [{'offer_id': r[0], 'clicks': r[1]} for r in cursor.fetchall()]

            cursor.execute(
                f"SELECT country, COUNT(*) FROM link_clicks WHERE clicked_at >= datetime('now', '-{days} days') GROUP BY country ORDER BY COUNT(*) DESC")
            stats['country_distribution'] = [{'country': r[0], 'clicks': r[1]} for r in cursor.fetchall()]

            return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            conn.close()