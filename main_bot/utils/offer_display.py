import os
import logging
from typing import Dict
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)


class OfferDisplay:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏"""

    @staticmethod
    async def show_single_offer(message: Message, state: FSMContext, offer: Dict, index: int, total: int):
        """–ü–æ–∫–∞–∑ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞—Ç—å"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ñ—Ñ–µ—Ä–∞
        name = offer.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = offer.get('description', '–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–π–º–∞')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ª–æ–≤–∏–π
        user_data = await state.get_data()
        amount_formatted = f"{user_data.get('amount', 0):,}".replace(',', ' ')
        country = user_data.get('country', 'russia')
        currency = "‚Ç∏" if country == "kazakhstan" else "‚ÇΩ"

        offer_text = (
            f"üè¶ <b>{name}</b>\n\n"
            f"{description}\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {amount_formatted}{currency}\n"
            f"üìÖ <b>–°—Ä–æ–∫:</b> {user_data.get('term', 0)} –¥–Ω–µ–π\n"
            f"üÜì <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {'0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤' if offer.get('zero_percent') else '–í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'}\n\n"
            f"üìä <b>–í–∞—Ä–∏–∞–Ω—Ç {index + 1} –∏–∑ {total}</b>"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []

        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º
        buttons.append([
            InlineKeyboardButton(
                text="üí∞ –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ô–ú",
                callback_data=f"get_loan_{offer['id']}"
            )
        ])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π
        if index > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_offer")
            )

        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if index < total - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è –ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="next_offer")
            )

        if nav_buttons:
            buttons.append(nav_buttons)

        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        buttons.append([
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="change_params")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ—Ñ–µ—Ä–æ–º –≤—Å–µ–≥–¥–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏
        user_data = await state.get_data()
        last_message_id = user_data.get('last_offer_message_id')
        if last_message_id:
            try:
                await message.bot.delete_message(message.chat.id, last_message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        logo_path = offer.get('logo')
        if logo_path and os.path.exists(f"data/images/logos/{logo_path}"):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                photo = FSInputFile(f"data/images/logos/{logo_path}")
                sent_message = await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption=offer_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                await state.update_data(last_offer_message_id=sent_message.message_id)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {logo_path}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                sent_message = await message.answer(offer_text, reply_markup=keyboard, parse_mode="HTML")
                await state.update_data(last_offer_message_id=sent_message.message_id)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            sent_message = await message.answer(offer_text, reply_markup=keyboard, parse_mode="HTML")
            await state.update_data(last_offer_message_id=sent_message.message_id)