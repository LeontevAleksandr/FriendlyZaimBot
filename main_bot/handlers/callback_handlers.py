import logging
from typing import Dict
from aiogram import Bot, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from main_bot.states.loan_flow import LoanFlow
from main_bot.keyboards.inline_keyboards import get_popular_offers_keyboard
from main_bot.utils.analytics import AnalyticsTracker
from main_bot.utils.offer_display import OfferDisplay
from shared.offer_manager import OfferManager
from user_profile_manager import UserProfileManager

logger = logging.getLogger(__name__)


class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.offer_manager = OfferManager()
        self.analytics = AnalyticsTracker()
        self.profile_manager = UserProfileManager()
        self.offer_display = OfferDisplay()

    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–ª–±–µ–∫–æ–≤"""
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        dp.callback_query.register(self.popular_offer_callback, F.data.startswith("popular_"))
        dp.callback_query.register(self.back_to_popular_callback, F.data == "back_to_popular")

        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
        dp.callback_query.register(self.quick_search_callback, F.data.startswith("quick_search_"))

        # FSM —Ñ–ª–æ—É –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        dp.callback_query.register(self.country_callback, F.data.startswith("country_"))
        dp.callback_query.register(self.age_callback, F.data.startswith("age_"))
        dp.callback_query.register(self.amount_callback, F.data.startswith("amount_"))
        dp.callback_query.register(self.term_callback, F.data.startswith("term_"))
        dp.callback_query.register(self.payment_callback, F.data.startswith("payment_"))
        dp.callback_query.register(self.zero_percent_callback, F.data.startswith("zero_"))

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤
        dp.callback_query.register(self.get_loan_callback, F.data.startswith("get_loan_"))
        dp.callback_query.register(self.next_offer_callback, F.data == "next_offer")
        dp.callback_query.register(self.prev_offer_callback, F.data == "prev_offer")
        dp.callback_query.register(self.back_to_offers_callback, F.data == "back_to_offers")
        dp.callback_query.register(self.change_params_callback, F.data == "change_params")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–±–µ–∫–∏
        dp.callback_query.register(self.share_bot_from_offer_callback, F.data == "share_bot")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        dp.callback_query.register(self.change_profile_settings_callback, F.data == "change_profile_settings")
        dp.callback_query.register(self.edit_country_callback, F.data == "edit_country")
        dp.callback_query.register(self.edit_age_callback, F.data == "edit_age")
        dp.callback_query.register(self.back_to_main_callback, F.data == "back_to_main")

    async def edit_message_with_keyboard(self, message, text: str,
                                         inline_keyboard: InlineKeyboardMarkup = None, parse_mode: str = "HTML"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            if message.photo:
                await message.edit_caption(caption=text, reply_markup=inline_keyboard, parse_mode=parse_mode)
            else:
                await message.edit_text(text=text, reply_markup=inline_keyboard, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(text, reply_markup=inline_keyboard, parse_mode=parse_mode)

    async def back_to_popular_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"""
        popular_text = (
            "üî• <b>–ü–û–ü–£–õ–Ø–†–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
            "üí∞ <b>–¢–æ–ø –∑–∞–π–º—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º!</b>\n"
            "‚ö° –î–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç\n"
            "‚úÖ –û–¥–æ–±—Ä—è–µ–º 95% –∑–∞—è–≤–æ–∫\n"
            "üÜì 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b>"
        )

        keyboard = get_popular_offers_keyboard()
        await callback.message.edit_text(popular_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def popular_offer_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        offer_type = callback.data.split("_", 1)[1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await self.profile_manager.get_or_create_profile(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name
        )

        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        search_criteria = self._get_popular_offer_criteria(offer_type, profile)
        search_text = self._get_popular_offer_text(offer_type)

        if not search_criteria:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        session_id = await self.analytics.track_session_start(
            callback.from_user.id,
            search_criteria['age'],
            search_criteria['country']
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(**search_criteria, session_id=session_id)

        # –ò—â–µ–º –æ—Ñ—Ñ–µ—Ä—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        offers = self.offer_manager.get_filtered_offers(search_criteria)

        if not offers:
            no_offers_text = (
                f"{search_text}\n\n"
                "üòî <b>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫ –≤—Ä—É—á–Ω—É—é:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üî• –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="back_to_popular")],
                [InlineKeyboardButton(text="üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="back_to_main")]
            ])

            await callback.message.edit_text(no_offers_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        try:
            await callback.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏: {callback.message.message_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã
        await state.update_data(
            found_offers=offers,
            current_offer_index=0
        )

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
        if session_id:
            await self.analytics.track_offers_shown(session_id, [offers[0]['id']])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä
        await self.show_single_offer(callback.message, state, offers[0], 0, len(offers))
        await state.set_state(LoanFlow.viewing_offers)

        await callback.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(offers)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")

    async def quick_search_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        parts = callback.data.split("_")
        country = parts[2]
        age = int(parts[3])

        await state.update_data(country=country, age=age)
        await self.profile_manager.increment_sessions(callback.from_user.id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
        text = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –°–£–ú–ú–£ –∑–∞–π–º–∞</b>"
        keyboard = self._get_amount_keyboard(country)

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_amount)
        await callback.answer("–£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –≤–∞—Å!")

    async def country_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã"""
        country = callback.data.split("_")[1]
        await state.update_data(country=country)

        await self.profile_manager.update_profile_preferences(
            callback.from_user.id,
            country=country
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await state.get_data()
        if user_data.get('user_profile'):
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            success_text = (
                f"‚úÖ <b>–°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üåç –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: {'üá∑üá∫ –†–æ—Å—Å–∏—è' if country == 'russia' else 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'}\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data="change_profile_settings")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])

            await self.edit_message_with_keyboard(callback.message, success_text, keyboard)
            await callback.answer("–°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return

        # –û–±—ã—á–Ω—ã–π —Ñ–ª–æ—É - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –≤–æ–∑—Ä–∞—Å—Ç–∞
        country_name = "üá∑üá∫ –†–æ—Å—Å–∏–∏" if country == "russia" else "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ"
        text = f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–±–∏—Ä–∞–µ–º –∑–∞–π–º—ã –≤ {country_name}\n\nüë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="18-25 –ª–µ—Ç", callback_data="age_22")],
            [InlineKeyboardButton(text="26-35 –ª–µ—Ç", callback_data="age_30")],
            [InlineKeyboardButton(text="36-50 –ª–µ—Ç", callback_data="age_43")],
            [InlineKeyboardButton(text="51+ –ª–µ—Ç", callback_data="age_60")]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_age)
        await callback.answer()

    async def age_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        age = int(callback.data.split("_")[1])
        await state.update_data(age=age)

        await self.profile_manager.update_profile_preferences(
            callback.from_user.id,
            age=age
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await state.get_data()
        if user_data.get('user_profile') and not user_data.get('session_id'):
            # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            success_text = (
                f"‚úÖ <b>–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üéÇ –ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data="change_profile_settings")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])

            await self.edit_message_with_keyboard(callback.message, success_text, keyboard)
            await callback.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
            return

        # –û–±—ã—á–Ω—ã–π —Ñ–ª–æ—É - —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        session_id = await self.analytics.track_session_start(
            callback.from_user.id,
            age,
            user_data['country']
        )
        await state.update_data(session_id=session_id)

        text = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –°–£–ú–ú–£ –∑–∞–π–º–∞</b>"
        keyboard = self._get_amount_keyboard(user_data.get('country'))

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_amount)
        await callback.answer()

    async def amount_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Å—É–º–º—ã –∑–∞–π–º–∞"""
        amount = int(callback.data.split("_")[1])
        await state.update_data(amount=amount)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–µ—Å—Å–∏—é
        user_data = await state.get_data()
        session_id = user_data.get('session_id')
        if session_id:
            await self.analytics.track_session_parameters(session_id, amount)

        text = "üìÖ <b>–í—ã–±–µ—Ä–∏ –°–†–û–ö –∑–∞–π–º–∞</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="term_7"),
                InlineKeyboardButton(text="14 –¥–Ω–µ–π", callback_data="term_14")
            ],
            [
                InlineKeyboardButton(text="21 –¥–µ–Ω—å", callback_data="term_21"),
                InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data="term_30")
            ]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_term)
        await callback.answer()

    async def term_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –∑–∞–π–º–∞"""
        term = int(callback.data.split("_")[1])
        await state.update_data(term=term)

        text = (
            "üí≥ <b>–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏?</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π–º–∞:"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data="payment_card")],
            [InlineKeyboardButton(text="üì± QIWI –∫–æ—à–µ–ª–µ–∫", callback_data="payment_qiwi")],
            [InlineKeyboardButton(text="üü° –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏", callback_data="payment_yandex")],
            [InlineKeyboardButton(text="üè¶ –ù–∞ —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ", callback_data="payment_bank")],
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_cash")],
            [InlineKeyboardButton(text="üìû –ß–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="payment_contact")]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_payment)
        await callback.answer()

    async def payment_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"""
        payment_method = callback.data.split("_")[1]
        await state.update_data(payment_method=payment_method)

        text = "üí≥ <b>–í—ã–±–µ—Ä–∏ –ü–†–û–¶–ï–ù–¢ –∑–∞–π–º–∞</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–æ–ª—å–∫–æ 0%", callback_data="zero_true")],
            [InlineKeyboardButton(text="üí∞ –õ—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="zero_false")]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await state.set_state(LoanFlow.choosing_zero_percent)
        await callback.answer()

    async def zero_percent_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä 0% –∏–ª–∏ –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø–æ–∫–∞–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        zero_only = callback.data.split("_")[1] == "true"
        await state.update_data(zero_percent_only=zero_only)

        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await state.get_data()

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ñ—Ñ–µ—Ä—ã
        offers = self.offer_manager.get_filtered_offers(user_data)

        if not offers:
            text = (
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
            ])

            await self.edit_message_with_keyboard(callback.message, text, keyboard)
            await callback.answer()
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏ –ü–†–û–¶–ï–ù–¢ –∑–∞–π–º–∞" –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Ñ—Ñ–µ—Ä–æ–≤
        try:
            await callback.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞: {callback.message.message_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã
        await state.update_data(
            found_offers=offers,
            current_offer_index=0
        )

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
        session_id = user_data.get('session_id')
        if session_id:
            await self.analytics.track_offers_shown(session_id, [offers[0]['id']])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä
        await self.show_single_offer(callback.message, state, offers[0], 0, len(offers))
        await state.set_state(LoanFlow.viewing_offers)
        await callback.answer()

    async def show_single_offer(self, message, state: FSMContext, offer: Dict, index: int, total: int):
        """–ü–æ–∫–∞–∑ –æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º"""
        await self.offer_display.show_single_offer(message, state, offer, index, total)

    async def get_loan_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ì–õ–ê–í–ù–ê–Ø –ú–ï–¢–†–ò–ö–ê: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ"""
        offer_id = callback.data.split("_", 2)[2]
        user_data = await state.get_data()
        country = user_data.get('country', 'russia')

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ñ—Ñ–µ—Ä
        offers = user_data.get('found_offers', [])
        selected_offer = None

        for offer in offers:
            if offer['id'] == offer_id:
                selected_offer = offer
                break

        if not selected_offer:
            await callback.answer("–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        geography = selected_offer.get('geography', {})
        link_key = f"{country}_link"
        partner_link = geography.get(link_key)

        if not partner_link:
            await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        user_id = callback.from_user.id
        personalized_link = partner_link.replace('{user_id}', str(user_id))

        # –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ - –ì–õ–ê–í–ù–ê–Ø –ú–ï–¢–†–ò–ö–ê!
        session_id = user_data.get('session_id')
        await self.analytics.track_link_click(user_id, session_id, offer_id, country)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        await self.profile_manager.increment_clicks(callback.from_user.id)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ü–û–õ–£–ß–ò–¢–¨ –î–ï–ù–¨–ì–ò –°–ï–ô–ß–ê–°!", url=personalized_link)],
                [InlineKeyboardButton(text="üîô –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="back_to_offers")],
                [InlineKeyboardButton(text="üöÄ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", callback_data="share_bot")]
            ])

            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ
            currency = "‚Ç∏" if country == "kazakhstan" else "‚ÇΩ"

            success_text = (
                f"‚úÖ <b>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>\n\n"
                f"üè¶ {selected_offer.get('name')}\n"
                f"üí∞ {user_data.get('amount', 0):,}{currency} –Ω–∞ {user_data.get('term', 0)} –¥–Ω–µ–π\n\n"
                f"üëÜ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–π–º–∞</b>"
            )

            await self.edit_message_with_keyboard(callback.message, success_text, keyboard)

            # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
            logger.info(f"–ö–õ–ò–ö –ü–û –°–°–´–õ–ö–ï: user_id={user_id}, offer_id={offer_id}, country={country}")

            await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–π–º–∞!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞", show_alert=True)

    async def next_offer_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ñ—Ñ–µ—Ä"""
        user_data = await state.get_data()
        offers = user_data.get('found_offers', [])
        current_index = user_data.get('current_offer_index', 0)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ñ—Ñ–µ—Ä—É
        new_index = min(current_index + 1, len(offers) - 1)
        await state.update_data(current_offer_index=new_index)

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
        session_id = user_data.get('session_id')
        if session_id:
            await self.analytics.track_offers_shown(session_id, [offers[new_index]['id']])

        await self.show_single_offer(callback.message, state, offers[new_index], new_index, len(offers))
        await callback.answer()

    async def prev_offer_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ñ—Ñ–µ—Ä"""
        user_data = await state.get_data()
        offers = user_data.get('found_offers', [])
        current_index = user_data.get('current_offer_index', 0)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ—Ñ—Ñ–µ—Ä—É
        new_index = max(current_index - 1, 0)
        await state.update_data(current_offer_index=new_index)

        await self.show_single_offer(callback.message, state, offers[new_index], new_index, len(offers))
        await callback.answer()

    async def back_to_offers_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ñ—Ñ–µ—Ä–æ–≤"""
        user_data = await state.get_data()
        offers = user_data.get('found_offers', [])
        current_index = user_data.get('current_offer_index', 0)

        if not offers:
            await callback.answer("–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞", show_alert=True)
            return

        await self.show_single_offer(callback.message, state, offers[current_index], current_index, len(offers))
        await callback.answer()

    async def change_params_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∑–∞–π–º–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏"""
        user_data = await state.get_data()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –æ—Ñ—Ñ–µ—Ä–∞
        last_message_id = user_data.get('last_offer_message_id')
        if last_message_id:
            try:
                await callback.message.bot.delete_message(callback.message.chat.id, last_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä–æ–º: {last_message_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä–æ–º: {e}")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ—Ñ–µ—Ä–æ–º
        try:
            await callback.message.delete()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä–æ–º: {callback.message.message_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ–µ—Ä–æ–º: {e}")

        # –û—á–∏—â–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(last_offer_message_id=None)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await self.profile_manager.get_or_create_profile(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name
        )

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if profile.country and profile.age:
            await state.update_data(
                country=profile.country,
                age=profile.age
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_id = await self.analytics.track_session_start(
                callback.from_user.id,
                profile.age,
                profile.country
            )
            await state.update_data(session_id=session_id)

            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
            text = "üîÑ <b>–ò–∑–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–π–º–∞</b>\n\nüí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –°–£–ú–ú–£ –∑–∞–π–º–∞</b>"
            keyboard = self._get_amount_keyboard(profile.country)
            await state.set_state(LoanFlow.choosing_amount)

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É
            await state.clear()
            welcome_text = (
                "üîÑ <b>–ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
                "üí∞ –î–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç\n"
                "‚úÖ –û–¥–æ–±—Ä—è–µ–º 9 –∏–∑ 10 –∑–∞—è–≤–æ–∫\n"
                "üÜì 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
                [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")]
            ])

            await state.set_state(LoanFlow.choosing_country)
            text = welcome_text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ)
        new_message = await callback.message.bot.send_message(
            chat_id=callback.message.chat.id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await callback.answer("–ò–∑–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞!")

    async def change_profile_settings_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        user_data = await state.get_data()
        profile = user_data.get('user_profile', {})

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ –ò–º—è: {profile.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {'üá∑üá∫ –†–æ—Å—Å–∏—è' if profile.get('country') == 'russia' else 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' if profile.get('country') == 'kazakhstan' else '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="edit_country")],
            [InlineKeyboardButton(text="üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        await self.edit_message_with_keyboard(callback.message, settings_text, keyboard)
        await callback.answer()

    async def edit_country_callback(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É:</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
            [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="change_profile_settings")]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await callback.answer()

    async def edit_age_callback(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ"""
        text = "üéÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="18-25 –ª–µ—Ç", callback_data="age_22")],
            [InlineKeyboardButton(text="26-35 –ª–µ—Ç", callback_data="age_30")],
            [InlineKeyboardButton(text="36-50 –ª–µ—Ç", callback_data="age_43")],
            [InlineKeyboardButton(text="51+ –ª–µ—Ç", callback_data="age_60")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="change_profile_settings")]
        ])

        await self.edit_message_with_keyboard(callback.message, text, keyboard)
        await callback.answer()

    async def back_to_main_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        profile = await self.profile_manager.get_or_create_profile(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name
        )

        await state.update_data(user_profile=profile.__dict__)

        if profile.country and profile.age:
            country_name = "üá∑üá∫ –†–æ—Å—Å–∏–∏" if profile.country == "russia" else "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ"

            welcome_text = (
                f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {profile.first_name}!</b>\n\n"
                f"üìç –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
                f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç\n\n"
                f"üí∞ –ù–∞–π—Ç–∏ –∑–∞–π–º—ã —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –î–ê, –ù–ê–ô–¢–ò –ó–ê–ô–ú–´!",
                                      callback_data=f"quick_search_{profile.country}_{profile.age}")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_profile_settings")]
            ])
        else:
            welcome_text = (
                "üöÄ <b>–ù–∞–π–¥–µ–º –≤—ã–≥–æ–¥–Ω—ã–π –∑–∞–π–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥!</b>\n\n"
                "üí∞ –ó–∞–π–º—ã –¥–æ 500,000‚Ç∏ / 50,000‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç\n"
                "‚úÖ –û–¥–æ–±—Ä—è–µ–º –¥–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –ö–ò\n"
                "üÜì 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "‚ö° –ë–µ–∑ —Å–ø—Ä–∞–≤–æ–∫ –∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª–µ–π\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
                [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")]
            ])

        await self.edit_message_with_keyboard(callback.message, welcome_text, keyboard)
        await callback.answer()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _get_popular_offer_criteria(self, offer_type: str, profile) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        base_country = profile.country or 'russia'
        base_age = profile.age or 30

        criteria_map = {
            "zero_percent": {
                'country': base_country,
                'age': base_age,
                'amount': 15000 if base_country == 'russia' else 150000,
                'zero_percent_only': True,
                'term': 14,
                'payment_method': 'card'
            },
            "instant": {
                'country': base_country,
                'age': base_age,
                'amount': 10000 if base_country == 'russia' else 100000,
                'zero_percent_only': False,
                'term': 7,
                'payment_method': 'card'
            },
            "cash": {
                'country': base_country,
                'age': base_age,
                'amount': 20000 if base_country == 'russia' else 200000,
                'zero_percent_only': False,
                'term': 14,
                'payment_method': 'cash'
            },
            "big_amount": {
                'country': base_country,
                'age': base_age,
                'amount': 50000 if base_country == 'russia' else 500000,
                'zero_percent_only': False,
                'term': 30,
                'payment_method': 'card'
            },
            "no_docs": {
                'country': base_country,
                'age': base_age,
                'amount': 15000 if base_country == 'russia' else 150000,
                'zero_percent_only': False,
                'term': 14,
                'payment_method': 'card'
            },
            "bad_credit": {
                'country': base_country,
                'age': base_age,
                'amount': 10000 if base_country == 'russia' else 100000,
                'zero_percent_only': False,
                'term': 14,
                'payment_method': 'card'
            },
            "russia": {
                'country': 'russia',
                'age': base_age,
                'amount': 25000,
                'zero_percent_only': False,
                'term': 14,
                'payment_method': 'card'
            },
            "kazakhstan": {
                'country': 'kazakhstan',
                'age': base_age,
                'amount': 250000,
                'zero_percent_only': False,
                'term': 14,
                'payment_method': 'card'
            }
        }

        return criteria_map.get(offer_type)

    def _get_popular_offer_text(self, offer_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        text_map = {
            "zero_percent": "üÜì <b>–ó–ê–ô–ú–´ –ë–ï–ó –ü–ï–†–ï–ü–õ–ê–¢ (0%)</b>",
            "instant": "üí≥ <b>–î–ï–ù–¨–ì–ò –ù–ê –ö–ê–†–¢–£ –ó–ê 5 –ú–ò–ù–£–¢</b>",
            "cash": "üíµ <b>–ù–ê–õ–ò–ß–ù–´–ï –í –†–£–ö–ò</b>",
            "big_amount": "üöÄ <b>–°–£–ú–ú–´ –¥–æ 500–ö</b>",
            "no_docs": "‚ö° <b>–ë–ï–ó –°–ü–†–ê–í–û–ö –ò –ü–û–†–£–ß–ò–¢–ï–õ–ï–ô</b>",
            "bad_credit": "üõ°Ô∏è <b>–ü–õ–û–•–ê–Ø –ö–ò? –ù–ï –ü–†–û–ë–õ–ï–ú–ê!</b>",
            "russia": "üá∑üá∫ <b>–ó–ê–ô–ú–´ –î–õ–Ø –†–û–°–°–ò–ò</b>",
            "kazakhstan": "üá∞üáø <b>–ó–ê–ô–ú–´ –î–õ–Ø –ö–ê–ó–ê–•–°–¢–ê–ù–ê</b>"
        }

        return text_map.get(offer_type, "üí∞ <b>–ü–û–ü–£–õ–Ø–†–ù–´–ï –ó–ê–ô–ú–´</b>")

    def _get_amount_keyboard(self, country: str) -> InlineKeyboardMarkup:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã"""
        if country == "kazakhstan":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="50,000‚Ç∏ –∏ –º–µ–Ω–µ–µ", callback_data="amount_50000"),
                    InlineKeyboardButton(text="100,000‚Ç∏", callback_data="amount_100000")
                ],
                [
                    InlineKeyboardButton(text="150,000‚Ç∏", callback_data="amount_150000"),
                    InlineKeyboardButton(text="250,000‚Ç∏", callback_data="amount_250000")
                ],
                [
                    InlineKeyboardButton(text="500,000‚Ç∏ –∏ –±–æ–ª–µ–µ", callback_data="amount_500000")
                ]
            ])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="5,000‚ÇΩ –∏ –º–µ–Ω–µ–µ", callback_data="amount_5000"),
                    InlineKeyboardButton(text="10,000‚ÇΩ", callback_data="amount_10000")
                ],
                [
                    InlineKeyboardButton(text="15,000‚ÇΩ", callback_data="amount_15000"),
                    InlineKeyboardButton(text="25,000‚ÇΩ", callback_data="amount_25000")
                ],
                [
                    InlineKeyboardButton(text="50,000‚ÇΩ –∏ –±–æ–ª–µ–µ", callback_data="amount_50000")
                ]
            ])

        return keyboard

    async def share_bot_from_offer_callback(self, callback: CallbackQuery, state: FSMContext):
        """Callback –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ñ—Ñ–µ—Ä–∞"""
        bot_username = (await self.bot.get_me()).username
        share_url = f"https://t.me/{bot_username}"

        share_text = (
            "üöÄ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!</b>\n\n"
            "üí∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –∑–∞–π–º—ã:\n"
            "‚úÖ –î–æ 500,000‚Ç∏ / 50,000‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É\n"
            "‚ö° –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç\n"
            "üÜì 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "üõ°Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –ö–ò\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞:</b>\n<code>{share_url}</code>\n\n"
            "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
                                  url=f"https://t.me/share/url?url={share_url}&text=üí∞ –ù–∞–π–¥–∏ –≤—ã–≥–æ–¥–Ω—ã–π –∑–∞–π–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥! –î–æ 500–ö –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç.")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="back_to_offers")]
        ])

        await self.edit_message_with_keyboard(callback.message, share_text, keyboard)
        await callback.answer()