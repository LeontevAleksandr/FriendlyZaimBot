import logging
from aiogram import Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from main_bot.states.loan_flow import LoanFlow
from main_bot.keyboards.reply_keyboards import get_main_keyboard
from main_bot.utils.analytics import AnalyticsTracker
from shared.user_profile_manager import UserProfileManager

logger = logging.getLogger(__name__)


class StartHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.analytics = AnalyticsTracker()
        self.profile_manager = UserProfileManager()

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–π–º–æ–≤"),
            BotCommand(command="restart", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"),
            BotCommand(command="clear_profile", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã")
        ]

        await self.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        dp.message.register(self.cmd_start, CommandStart())
        dp.message.register(self.cmd_restart, Command("restart"))
        dp.message.register(self.cmd_clear_profile, Command("clear_profile"))
        dp.message.register(self.cmd_help, Command("help"))
        dp.message.register(self.handle_settings_button, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        dp.message.register(self.handle_share_button, F.text == "üöÄ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º")

        # –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        dp.callback_query.register(self.confirm_clear_profile_callback, F.data == "confirm_clear_profile")
        dp.callback_query.register(self.execute_clear_profile_callback, F.data == "execute_clear_profile")
        dp.callback_query.register(self.share_bot_callback, F.data == "share_bot")
        dp.callback_query.register(self.back_to_main_callback, F.data == "back_to_main")

        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–æ—É (–µ—Å–ª–∏ CallbackHandlers –Ω–µ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª)
        dp.callback_query.register(self.country_callback, F.data.startswith("country_"))
        dp.callback_query.register(self.age_callback, F.data.startswith("age_"))

    async def cmd_start(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è —Å –ø–µ—Ä–≤–æ–π —Å–µ–∫—É–Ω–¥—ã"""
        await state.clear()

        # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.analytics.track_user_start(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await self.profile_manager.get_or_create_profile(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_profile=profile.__dict__)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if profile.country and profile.age:
            # –í–û–ó–í–†–ê–©–ê–Æ–©–ò–ô–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            country_name = "üá∑üá∫ –†–æ—Å—Å–∏–∏" if profile.country == "russia" else "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ"

            welcome_text = (
                f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {profile.first_name}!</b>\n\n"
                f"üìç –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
                f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç\n\n"
                f"üí∞ –ù–∞–π—Ç–∏ –∑–∞–π–º—ã —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –î–ê, –ù–ê–ô–¢–ò –ó–ê–ô–ú–´!",
                                      callback_data=f"quick_search_{profile.country}_{profile.age}")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="change_profile_settings")]
            ])

        else:
            # –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
            welcome_text = (
                f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name or '–¥—Ä—É–≥'}!</b>\n\n"
                "üí∞ –ù–∞–π–¥—ë–º –≤–∞–º <b>–∑–∞–π–º –¥–æ 500 000 ‚ÇΩ</b> –∑–∞ 5 –º–∏–Ω—É—Ç!\n\n"
                "‚úÖ –ë–µ–∑ –æ—Ç–∫–∞–∑–æ–≤ –∏ —Å–ø—Ä–∞–≤–æ–∫\n"
                "‚úÖ –ü–ª–æ—Ö–∞—è –ö–ò? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞!\n"
                "‚úÖ –î–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_russia")],
                [InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kazakhstan")]
            ])

            await state.set_state(LoanFlow.choosing_country)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("‚Äã", reply_markup=get_main_keyboard())

    async def cmd_restart(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞"""
        await state.clear()

        restart_text = (
            "üîÑ <b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã.\n"
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–ª—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
            "–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–ê–ß–ê–¢–¨ –ü–û–ò–°–ö –ó–ê–ô–ú–û–í", callback_data="back_to_main")]
        ])

        await message.answer(restart_text, reply_markup=keyboard, parse_mode="HTML")

    async def cmd_clear_profile(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_profile")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
        ])

        await message.answer(
            "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n"
            "(–≤–æ–∑—Ä–∞—Å—Ç, —Å—Ç—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def cmd_help(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "üîÑ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç\n"
            "üóëÔ∏è /clear_profile - –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚ÑπÔ∏è /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üì± <b>–ö–Ω–æ–ø–∫–∏:</b>\n"
            "üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–π–º–æ–≤!"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–ê–ô–¢–ò –ó–ê–ô–ú–´", callback_data="back_to_main")]
        ])

        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")

    async def handle_settings_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = await self.profile_manager.get_or_create_profile(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ –ò–º—è: {profile.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {'üá∑üá∫ –†–æ—Å—Å–∏—è' if profile.country == 'russia' else 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' if profile.country == 'kazakhstan' else '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.age or '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="edit_country")],
            [InlineKeyboardButton(text="üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
            [InlineKeyboardButton(text="üîô –ó–∞–∫—Ä—ã—Ç—å", callback_data="back_to_main")]
        ])

        await message.answer(settings_text, reply_markup=keyboard, parse_mode="HTML")

    async def handle_share_button(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"""
        share_text = (
            "üöÄ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!</b>\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫–æ–º—ã–º –æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–π–º–∞—Ö:\n"
            "‚úÖ –î–æ 500–ö –±–µ–∑ –æ—Ç–∫–∞–∑–æ–≤\n"
            "‚úÖ –ó–∞ 5 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞—Ä—Ç—É\n"
            "‚úÖ –î–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –ö–ò\n\n"
            "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_bot")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        await message.answer(share_text, reply_markup=keyboard, parse_mode="HTML")

    async def back_to_main_callback(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        await callback.message.delete()
        await callback.answer()

    async def confirm_clear_profile_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
        confirm_text = (
            "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É\n"
            "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
            "‚Ä¢ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "‚ùó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="execute_clear_profile"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
            ]
        ])

        await callback.message.edit_text(confirm_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def execute_clear_profile_callback(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            await self.profile_manager.clear_profile(callback.from_user.id)
            await state.clear()

            success_text = (
                "‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>\n\n"
                "üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–π–º–æ–≤"
            )

            # –£–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(success_text, parse_mode="HTML")
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

    async def share_bot_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"""
        bot_username = (await self.bot.get_me()).username
        share_url = f"https://t.me/{bot_username}"

        share_text = (
            "üöÄ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!</b>\n\n"
            "üí∞ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –∑–∞–π–º—ã:\n"
            "‚úÖ –î–æ 500,000‚Ç∏ / 50,000‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É\n"
            "‚ö° –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç\n"
            "üÜì 0% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "üõ°Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –ö–ò\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞:</b>\n<code>{share_url}</code>\n\n"
            "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
                                  url=f"https://t.me/share/url?url={share_url}&text=üí∞ –ù–∞–π–¥–∏ –≤—ã–≥–æ–¥–Ω—ã–π –∑–∞–π–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥! –î–æ 500–ö –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç.")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        await callback.message.edit_text(share_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def country_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–æ—É"""
        country = callback.data.split("_")[1]
        await state.update_data(country=country)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        await self.profile_manager.update_profile_preferences(
            callback.from_user.id,
            country=country
        )

        country_name = "üá∑üá∫ –†–æ—Å—Å–∏–∏" if country == "russia" else "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ"
        text = f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–±–∏—Ä–∞–µ–º –∑–∞–π–º—ã –≤ {country_name}\n\nüë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="18-25 –ª–µ—Ç", callback_data="age_22")],
            [InlineKeyboardButton(text="26-35 –ª–µ—Ç", callback_data="age_30")],
            [InlineKeyboardButton(text="36-50 –ª–µ—Ç", callback_data="age_43")],
            [InlineKeyboardButton(text="51+ –ª–µ—Ç", callback_data="age_60")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(LoanFlow.choosing_age)
        await callback.answer()

    async def age_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–æ—É"""
        age = int(callback.data.split("_")[1])
        await state.update_data(age=age)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        await self.profile_manager.update_profile_preferences(
            callback.from_user.id,
            age=age
        )

        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
        success_text = (
            f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {'üá∑üá∫ –†–æ—Å—Å–∏—è' if (await state.get_data()).get('country') == 'russia' else 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–π–º—ã!"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ù–ê–ô–¢–ò –ó–ê–ô–ú–´",
                                  callback_data=f"quick_search_{(await state.get_data()).get('country')}_{age}")],
            [InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="back_to_popular")]
        ])

        await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")