import os
import sys
import subprocess
import sqlite3
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = ['data', 'data/images', 'data/images/logos']
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite"""
    db_path = 'data/analytics.db'
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id BIGINT UNIQUE NOT NULL,
            username VARCHAR(50),
            first_name VARCHAR(100),
            age INTEGER,
            country VARCHAR(20),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_activity TIMESTAMP,
            total_sessions INTEGER DEFAULT 0,
            total_link_clicks INTEGER DEFAULT 0
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            id INTEGER PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            session_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            session_end TIMESTAMP,
            age INTEGER,
            country VARCHAR(20),
            amount_requested INTEGER,
            shown_offers TEXT,
            clicked_offer_id VARCHAR(50),
            completed BOOLEAN DEFAULT FALSE
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS link_clicks (
            id INTEGER PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            session_id INTEGER REFERENCES sessions(id),
            offer_id VARCHAR(50) NOT NULL,
            country VARCHAR(20),
            clicked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ip_address VARCHAR(45),
            user_agent TEXT
        )
    ''')

    conn.commit()
    conn.close()


def init_offers_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    offers_path = 'data/offers.json'
    if not os.path.exists(offers_path):
        test_offers = {
            "microloans": {
                "offer_001": {
                    "id": "offer_001",
                    "name": "–ú–§–û –ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏",
                    "logo": "fastmoney_logo.jpg",
                    "geography": {
                        "countries": ["russia"],
                        "russia_link": "https://example.com/russia?ref={user_id}",
                        "kazakhstan_link": None
                    },
                    "limits": {
                        "min_amount": 1000,
                        "max_amount": 50000,
                        "min_age": 18,
                        "max_age": 70
                    },
                    "zero_percent": True,
                    "description": "–î–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ 5 –º–∏–Ω—É—Ç, –±–µ–∑ —Å–ø—Ä–∞–≤–æ–∫ –∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª–µ–π",
                    "metrics": {
                        "cr": 25.5,
                        "ar": 12.3,
                        "epc": 180.50,
                        "epl": 708.22
                    },
                    "priority": {
                        "manual_boost": 8,
                        "final_score": 90.5
                    },
                    "status": {
                        "is_active": True,
                        "created_at": "2025-08-05T14:00:00.000000",
                        "updated_at": "2025-08-05T14:00:00.000000"
                    }
                },
                "offer_002": {
                    "id": "offer_002",
                    "name": "–ó–∞–π–º –≠–∫—Å–ø—Ä–µ—Å—Å",
                    "logo": "express_logo.jpg",
                    "geography": {
                        "countries": ["russia", "kazakhstan"],
                        "russia_link": "https://example.com/russia?ref={user_id}",
                        "kazakhstan_link": "https://example.com/kz?ref={user_id}"
                    },
                    "limits": {
                        "min_amount": 3000,
                        "max_amount": 30000,
                        "min_age": 21,
                        "max_age": 65
                    },
                    "zero_percent": False,
                    "description": "–ë—ã—Å—Ç—Ä–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç",
                    "metrics": {
                        "cr": 18.2,
                        "ar": 15.7,
                        "epc": 220.30,
                        "epl": 1211.54
                    },
                    "priority": {
                        "manual_boost": 6,
                        "final_score": 75.8
                    },
                    "status": {
                        "is_active": True,
                        "created_at": "2025-08-05T14:00:00.000000",
                        "updated_at": "2025-08-05T14:00:00.000000"
                    }
                },
                "offer_003": {
                    "id": "offer_003",
                    "name": "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∑–∞–π–º—ã",
                    "logo": None,
                    "geography": {
                        "countries": ["russia"],
                        "russia_link": "https://example.com/instant?ref={user_id}",
                        "kazakhstan_link": None
                    },
                    "limits": {
                        "min_amount": 500,
                        "max_amount": 25000,
                        "min_age": 18,
                        "max_age": 75
                    },
                    "zero_percent": True,
                    "description": "0% –ø–µ—Ä–≤—ã–π –∑–∞–π–º, —Ä–µ—à–µ–Ω–∏–µ –∑–∞ 3 –º–∏–Ω—É—Ç—ã",
                    "metrics": {
                        "cr": 30.1,
                        "ar": 8.9,
                        "epc": 195.75,
                        "epl": 650.45
                    },
                    "priority": {
                        "manual_boost": 9,
                        "final_score": 85.2
                    },
                    "status": {
                        "is_active": True,
                        "created_at": "2025-08-05T14:00:00.000000",
                        "updated_at": "2025-08-05T14:00:00.000000"
                    }
                }
            },
            "metadata": {
                "created_at": "2025-08-05T14:00:00Z",
                "updated_at": "2025-08-05T14:00:00Z",
                "version": "1.0"
            }
        }

        with open(offers_path, 'w', encoding='utf-8') as f:
            json.dump(test_offers, f, ensure_ascii=False, indent=2)


def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"""
    if not os.path.exists('.env'):
        env_template = """# –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
MAIN_BOT_TOKEN=YOUR_MAIN_BOT_TOKEN_HERE
ADMIN_BOT_TOKEN=YOUR_ADMIN_BOT_TOKEN_HERE

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∑–Ω–∞–π—Ç–µ —É @userinfobot)
ADMIN_IDS=123456789,987654321

# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
DEBUG=True
"""
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_template)
        return False
    return True


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞"""
    if not create_env_file():
        print("‚ùå –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        return False

    load_dotenv()
    main_token = os.getenv('MAIN_BOT_TOKEN')

    if not main_token or main_token == 'YOUR_MAIN_BOT_TOKEN_HERE':
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return False

    return True


def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    requirements_content = """aiogram==3.4.1
python-dotenv==1.0.0
aiofiles==23.2.1
"""

    if not os.path.exists('requirements.txt'):
        with open('requirements.txt', 'w') as f:
            f.write(requirements_content)

    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],
                              stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False


async def run_both_bots():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–π–º–æ–≤...")
    print("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç + üîß –ê–¥–º–∏–Ω-–±–æ—Ç")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)

    try:
        load_dotenv()

        # –ò–º–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
        from main_bot import LoanBot

        main_token = os.getenv('MAIN_BOT_TOKEN')
        main_bot = LoanBot(main_token)

        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        task_main = asyncio.create_task(main_bot.start_polling())

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω-–±–æ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        admin_process = None
        if os.path.exists('admin_bot.py'):
            admin_process = subprocess.Popen([sys.executable, 'admin_bot.py'])
            print("‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        await task_main

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        if admin_process:
            admin_process.terminate()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        if 'admin_process' in locals() and admin_process:
            admin_process.terminate()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not check_env_file():
        return

    if not install_requirements():
        return

    if not os.path.exists('main_bot.py'):
        print("‚ùå –§–∞–π–ª main_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    create_directories()
    init_database()
    init_offers_file()

    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
    asyncio.run(run_both_bots())


if __name__ == "__main__":
    main()