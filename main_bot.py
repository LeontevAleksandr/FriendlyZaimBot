import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from main_bot.handlers.start_handler import StartHandler
from main_bot.handlers.loan_handlers import LoanHandlers
from main_bot.handlers.callback_handlers import CallbackHandlers
from main_bot.config.settings import setup_logging
from shared.database import init_database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")

if not BOT_TOKEN or BOT_TOKEN == "YOUR_MAIN_BOT_TOKEN_HERE":
    logger.error("‚ùå –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ MAIN_BOT_TOKEN –≤ —Ñ–∞–π–ª .env")
    exit(1)


class LoanBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –º–∏–∫—Ä–æ–∑–∞–π–º–æ–≤ - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""

    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.start_handler = StartHandler(self.bot)
        self.loan_handlers = LoanHandlers(self.bot)
        self.callback_handlers = CallbackHandlers(self.bot)

        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.start_handler.register_handlers(self.dp)
        self.loan_handlers.register_handlers(self.dp)
        self.callback_handlers.register_handlers(self.dp)

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        await self.start_handler.setup_bot_commands()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–∫—Ä–æ–∑–∞–π–º–æ–≤")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_database()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await self.setup_bot_commands()

        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ó–∞–ø—É—Å–∫ polling
        await self.dp.start_polling(self.bot)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = LoanBot(BOT_TOKEN)

    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.bot.session.close()
        logger.info("üîÑ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")


if __name__ == "__main__":
    asyncio.run(main())